#!/usr/bin/env python

from __future__ import print_function

import subprocess
import sys

MY_NAME = sys.argv[0].lstrip('./')


"""
ZooKeeper quorum tool.

Usage:
    $0 [<ID>:]<IP> [[<ID>:]<IP> ... ]

    Creates a list of serviced variables to set up a ZooKeeper ensemble.
    Run the same command on each machine, and this script will output a script
    to set the values SERVICED_ISVCS_ZOOKEEPER_ID, SERVICED_ZK,
    SERVICED_ISVCS_ZOOKEEPER_QUORUM, and SERVICED_ISVCS_START on each host's
    /etc/default/serviced file.

Examples:
    ./zookeeper-quorum-tool 19.103.3.{240,216,233}

    ./zookeeper-quorum-tool 1:19.103.3.240 2:19.103.3.216 3:19.103.3.233

    These two examples are equivalent. In either case, they should only generate
    output to stdout, so you won't get anything out of this until you append the
    output to /etc/default/serviced and restart the service.
"""

def which_am_i(nodes):
    ip_list = '|'.join([ip for (id_, ip) in nodes.items()])
    ifconfig = "ifconfig | awk '/%s/ { print $2 }'" % ip_list
    my_ip = subprocess.check_output(ifconfig, shell=True)
    if not my_ip:
        return None, None
    my_ip = my_ip.strip()
    if my_ip.startswith('addr:'):
        my_ip = my_ip[len('addr:'):]
    my_id = [id_ for (id_, ip) in nodes.items() if ip == my_ip][0]
    return my_id, my_ip


def SERVICED_ZK(nodes):
    hosts = []
    for id_ in sorted(nodes.keys()):
        hosts.append('%s:2181' % nodes[id_])
    return ','.join(hosts)


def SERVICED_ISVCS_ZOOKEEPER_QUORUM(nodes, my_ip):
    hosts = []
    for id_ in sorted(nodes.keys()):
        ip = nodes[id_]
        if ip == my_ip:
            ip = '0.0.0.0'
        hosts.append('%s@%s:2888:3888' % (id_, ip))
    return ','.join(hosts)


def main(args):
    nodes = {}
    for i, id_ip in enumerate(args.nodes, 1):
        if ':' in id_ip:
            id_, ip = id_ip.split(':')
        else:
            id_, ip = ('%i' % i), id_ip
        nodes[id_] = ip.strip()
    my_id, my_ip = which_am_i(nodes)
    if my_id is None or my_ip is None:
        print("Could not find my IP among the listed nodes.", file=sys.stderr)
        return 1
    print("")
    print("# <<< Generated by %s" % MY_NAME)
    print("SERVICED_ZK=%s" % SERVICED_ZK(nodes))
    print("SERVICED_ISVCS_ZOOKEEPER_ID=%s" % my_id)
    print("SERVICED_ISVCS_ZOOKEEPER_QUORUM=%s" %
          SERVICED_ISVCS_ZOOKEEPER_QUORUM(nodes, my_ip))
    if my_id != '1':
        print("SERVICED_ISVCS_START=zookeeper")
    print("# end of generated configs >>>")
    print("")
    

if __name__ == '__main__':
    from argparse import ArgumentParser
    ap = ArgumentParser()
    ap.add_argument('nodes', metavar='ID:IP', nargs='+', type=str,
                    help=("Zookeeper ID and IP of node, separated by a colon."
                          " For example, 1:192.168.0.201"))
    args = ap.parse_args()
    sys.exit(main(args))
