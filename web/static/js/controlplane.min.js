/*! controlplane 2014-04-29 */
function addChildren(allowed,parent){if(allowed[parent.Id]=!0,parent.children)for(var i=0;i<parent.children.length;i++)addChildren(allowed,parent.children[i])}function updateLanguage($scope,$cookies,$translate){var ln="en_US";void 0===$cookies.Language||(ln=$cookies.Language),$scope.user&&($scope.user.language=ln),$translate.uses(ln)}function ResourcesService($http,$location){var cached_pools,cached_hosts,cached_app_templates,cached_services,cached_services_map,cached_hosts_for_pool={},_get_services_tree=function(callback){$http.get("/services").success(function(data){console.log("Retrieved list of services"),cached_services=[],cached_services_map={},data.map(function(svc){cached_services_map[svc.Id]=svc}),data.map(function(svc){if(""!==svc.ParentServiceId){var parent=cached_services_map[svc.ParentServiceId];parent.children||(parent.children=[]),parent.children.push(svc)}else cached_services.push(svc)}),callback(cached_services,cached_services_map)}).error(function(data,status){console.error("Unable to retrieve services"),401===status&&unauthorized($location)})},_get_app_templates=function(callback){$http.get("/templates").success(function(data){console.log("Retrieved list of app templates"),cached_app_templates=data,callback(data)}).error(function(data,status){console.error("Unable to retrieve app templates"),401===status&&unauthorized($location)})},_get_pools=function(callback){$http.get("/pools").success(function(data){console.log("Retrieved list of pools"),cached_pools=data,callback(data)}).error(function(data,status){console.error("Unable to retrieve list of pools"),401===status&&unauthorized($location)})},_get_hosts_for_pool=function(poolID,callback){$http.get("/pools/"+poolID+"/hosts").success(function(data){console.log("Retrieved hosts for pool %s",poolID),cached_hosts_for_pool[poolID]=data,callback(data)}).error(function(data,status){console.error("Unable to retrieve hosts for pool %s",poolID),401===status&&unauthorized($location)})},_get_hosts=function(callback){$http.get("/hosts").success(function(data){console.log("Retrieved host details"),cached_hosts=data,callback(data)}).error(function(data,status){console.error("Unable to retrieve host details"),401===status&&unauthorized($location)})};return{get_pools:function(cacheOk,callback){cacheOk&&cached_pools?(console.log("Using cached pools"),callback(cached_pools)):_get_pools(callback)},get_running_services_for_service:function(serviceId,callback){$http.get("/services/"+serviceId+"/running").success(function(data){console.log("Retrieved running services for %s",serviceId),callback(data)}).error(function(data,status){console.error("Unable to acquire running services: %s",JSON.stringify(data)),401===status&&unauthorized($location)})},get_vhosts:function(callback){$http.get("/vhosts").success(function(data){console.log("Retrieved list of virtual hosts"),callback(data)}).error(function(data,status){console.error("Unable to acquire virtual hosts: %s",JSON.stringify(data)),401===status&&unauthorized($location)})},add_vhost:function(serviceId,application,virtualhost,callback){var ep="/services/"+serviceId+"/endpoint/"+application+"/vhosts/"+virtualhost,object={ServiceId:serviceId,Application:application,VirtualHostName:virtualhost},payload=JSON.stringify(object);$http.put(ep,payload).success(function(data){console.log("Added virtual host: %s, %s",ep,JSON.stringify(data)),callback(data)}).error(function(data,status){console.error("Unable to add virtual hosts: %s, %s",ep,JSON.stringify(data)),401===status&&unauthorized($location)})},delete_vhost:function(serviceId,application,virtualhost,callback){var ep="/services/"+serviceId+"/endpoint/"+application+"/vhosts/"+virtualhost;$http.delete(ep).success(function(data){console.log("Removed virtual host: %s, %s",ep,JSON.stringify(data)),callback(data)}).error(function(data,status){console.error("Unable to remove virtual hosts: %s, %s",ep,JSON.stringify(data)),401===status&&unauthorized($location)})},get_running_services_for_host:function(hostId,callback){$http.get("/hosts/"+hostId+"/running").success(function(data){console.log("Retrieved running services for %s",hostId),callback(data)}).error(function(data,status){console.error("Unable to acquire running services: %s",JSON.stringify(data)),401===status&&unauthorized($location)})},get_running_services:function(callback){$http.get("/running").success(function(data){callback(data)}).error(function(data,status){console.error("Unable to acquire running services: %s",JSON.stringify(data)),401===status&&unauthorized($location)})},add_pool:function(pool,callback){console.log("Adding detail: %s",JSON.stringify(pool)),$http.post("/pools/add",pool).success(function(data){console.log("Added new pool"),callback(data)}).error(function(data,status){console.error("Adding pool failed: %s",JSON.stringify(data)),401===status&&unauthorized($location)})},update_pool:function(poolID,editedPool,callback){$http.put("/pools/"+poolID,editedPool).success(function(data){console.log("Updated pool %s",poolID),callback(data)}).error(function(data,status){console.error("Updating pool failed: %s",JSON.stringify(data)),401===status&&unauthorized($location)})},remove_pool:function(poolID,callback){$http.delete("/pools/"+poolID).success(function(data){console.log("Removed pool %s",poolID),callback(data)}).error(function(data,status){console.error("Removing pool failed: %s",JSON.stringify(data)),401===status&&unauthorized($location)})},add_pool_virtual_ip:function(pool,ip,callback){var payload=JSON.stringify({poolID:pool,VirtualIp:ip});console.log("Adding pool virtual ip: %s",payload),$http.put("/pools/"+pool+"/virtualip/"+ip,payload).success(function(data){console.log("Added new pool virtual ip"),callback(data)}).error(function(data,status){console.error("Adding pool virtual ip failed: %s",JSON.stringify(data)),401===status&&unauthorized($location)})},remove_pool_virtual_ip:function(pool,ip,callback){console.log("Removing pool virtual ip: poolID:%s VirtualIp:%s",pool,ip),$http.delete("/pools/"+pool+"/virtualip/"+ip).success(function(data){console.log("Removed pool virtual ip"),callback(data)}).error(function(data,status){console.error("Remove pool virtual ip failed: %s",JSON.stringify(data)),401===status&&unauthorized($location)})},kill_running:function(hostId,serviceStateId,callback){$http.delete("/hosts/"+hostId+"/"+serviceStateId).success(function(data){console.log("Terminated %s",serviceStateId),callback(data)}).error(function(data,status){console.error("Terminating instance failed: %s",JSON.stringify(data)),401===status&&unauthorized($location)})},get_hosts:function(cacheOk,callback){cacheOk&&cached_hosts?(console.log("Using cached hosts"),callback(cached_hosts)):_get_hosts(callback)},add_host:function(host,callback){$http.post("/hosts/add",host).success(function(data){console.log("Added new host"),callback(data)}).error(function(data,status){console.error("Adding host failed: %s",JSON.stringify(data)),401===status&&unauthorized($location)})},update_host:function(hostId,editedHost,callback){$http.put("/hosts/"+hostId,editedHost).success(function(data){console.log("Updated host %s",hostId),callback(data)}).error(function(data,status){console.error("Updating host failed: %s",JSON.stringify(data)),401===status&&unauthorized($location)})},remove_host:function(hostId,callback){$http.delete("/hosts/"+hostId).success(function(data){console.log("Removed host %s",hostId),callback(data)}).error(function(data,status){console.error("Removing host failed: %s",JSON.stringify(data)),401===status&&unauthorized($location)})},get_hosts_for_pool:function(cacheOk,poolID,callback){cacheOk&&cached_hosts_for_pool[poolID]?callback(cached_hosts_for_pool[poolID]):_get_hosts_for_pool(poolID,callback)},get_services:function(cacheOk,callback){cacheOk&&cached_services&&cached_services_map?(console.log("Using cached services"),callback(cached_services,cached_services_map)):_get_services_tree(callback)},get_service_logs:function(serviceId,callback){$http.get("/services/"+serviceId+"/logs").success(function(data){callback(data)}).error(function(data,status){console.error("Unable to retrieve service logs: %s",JSON.stringify(data)),401===status&&unauthorized($location)})},get_service_state_logs:function(serviceId,serviceStateId,callback){$http.get("/services/"+serviceId+"/"+serviceStateId+"/logs").success(function(data){callback(data)}).error(function(data,status){console.error("Unable to retrieve service logs: %s",JSON.stringify(data)),401===status&&unauthorized($location)})},get_app_templates:function(cacheOk,callback){cacheOk&&cached_app_templates?(console.log("Using cached app templates"),callback(cached_app_templates)):_get_app_templates(callback)},add_service:function(service,callback){console.log("Adding detail: %s",JSON.stringify(service)),$http.post("/services/add",service).success(function(data){console.log("Added new service"),callback(data)}).error(function(data,status){console.error("Adding service failed: %s",JSON.stringify(data)),401===status&&unauthorized($location)})},update_service:function(serviceId,editedService,callback){$http.put("/services/"+serviceId,editedService).success(function(data){console.log("Updated service %s",serviceId),callback(data)}).error(function(data,status){console.error("Updating service failed: %s",JSON.stringify(data)),401===status&&unauthorized($location)})},deploy_app_template:function(deployDef,callback){$http.post("/templates/deploy",deployDef).success(function(data){console.log("Deployed app template"),callback(data)}).error(function(data,status){console.error("Deploying app template failed: %s",JSON.stringify(data)),401===status&&unauthorized($location)})},snapshot_service:function(serviceId,callback){$http.get("/services/"+serviceId+"/snapshot").success(function(data){callback(data)}).error(function(data,status){console.error("Snapshot service failed: %s",JSON.stringify(data)),401===status&&unauthorized($location)})},remove_service:function(serviceId,callback){$http.delete("/services/"+serviceId).success(function(data){console.log("Removed service %s",serviceId),callback(data)}).error(function(data,status){console.error("Removing service failed: %s",JSON.stringify(data)),401===status&&unauthorized($location)})},start_service:function(serviceId,callback){$http.put("/services/"+serviceId+"/startService").success(function(data){callback(data)}).error(function(data,status){console.error("Was unable to start service: %s",JSON.stringify(data)),401===status&&unauthorized($location)})},stop_service:function(serviceId,callback){$http.put("/services/"+serviceId+"/stopService").success(function(data){callback(data)}).error(function(data,status){console.error("Was unable to stop service: %s",JSON.stringify(data)),401===status&&unauthorized($location)})}}}function AuthService($cookies,$cookieStore,$location){var loggedIn=!1,userName=null;return{login:function(truth,username){loggedIn=truth,userName=username},checkLogin:function($scope){return $scope.dev=$cookieStore.get("ZDevMode"),loggedIn?($scope.loggedIn=!0,void($scope.user={username:$cookies.ZUsername})):void(void 0!==$cookies.ZCPToken?(loggedIn=!0,$scope.loggedIn=!0,$scope.user={username:$cookies.ZUsername}):unauthorized($location))}}}function StatsService($http){return{is_collecting:function(callback){$http.get("/stats").success(function(data,status){console.log("serviced is collecting stats"),callback(status)}).error(function(data,status){console.error("serviced is not collecting stats"),callback(status)})}}}function flattenTree(depth,current){var retVal=0===depth?[]:[current];if(current.zendepth=depth,!current.children)return retVal;for(var i=0;i<current.children.length;i++)retVal=retVal.concat(flattenTree(depth+1,current.children[i]));return retVal}function get_vhost_url($location,vhost){return $location.$$protocol+"://"+vhost+"."+$location.$$host+":"+$location.$$port}function aggregateVhosts(service){var vhosts=[];if(service.Endpoints)for(var i in service.Endpoints){var endpoint=service.Endpoints[i];if(endpoint.VHosts)for(var j in endpoint.VHosts){var name=endpoint.VHosts[j],vhost={Name:name,Application:service.Name,ServiceEndpoint:endpoint.Application,ApplicationId:service.Id};vhosts.push(vhost)}}for(var i in service.children){var child_service=service.children[i];vhosts=vhosts.concat(aggregateVhosts(child_service))}return vhosts}function aggregateVhostOptions(service){var options=[];if(service.Endpoints)for(var i in service.Endpoints){var endpoint=service.Endpoints[i];if(endpoint.VHosts){var option={ServiceId:service.Id,ServiceEndpoint:endpoint.Application,Value:service.Name+" - "+endpoint.Application};options.push(option)}}for(var i in service.children){var child_service=service.children[i];options=options.concat(aggregateVhostOptions(child_service))}return options}function refreshServices($scope,servicesService,cacheOk,extraCallback){void 0===$scope.services&&($scope.services={}),console.log("refresh services called"),servicesService.get_services(cacheOk,function(topServices,mappedServices){$scope.services.data=topServices,$scope.services.mapped=mappedServices;for(var key in $scope.services.mapped){var svc=$scope.services.mapped[key],depClass="",iconClass="";switch(svc.Deployment="successful",svc.Deployment){case"successful":depClass="deploy-success",iconClass="glyphicon glyphicon-ok";break;case"failed":depClass="deploy-error",iconClass="glyphicon glyphicon-remove";break;case"in-process":depClass="deploy-info",iconClass="glyphicon glyphicon-refresh";break;default:depClass="deploy-warning",iconClass="glyphicon glyphicon-question-sign"}updateRunning(svc),svc.deploymentClass=depClass,svc.deploymentIcon=iconClass}$scope.params&&$scope.params.serviceId&&($scope.services.current=$scope.services.mapped[$scope.params.serviceId],$scope.editService=$.extend({},$scope.services.current),$scope.services.current&&$scope.services.current.children&&($scope.services.subservices=flattenTree(0,$scope.services.current),$scope.vhosts.data=aggregateVhosts($scope.services.current),$scope.vhosts.options=aggregateVhostOptions($scope.services.current),$scope.vhosts.options.length>0&&($scope.vhosts.add.app_ep=$scope.vhosts.options[0]))),extraCallback&&extraCallback()})}function getFullPath(allPools,pool){return allPools&&pool.ParentId&&allPools[pool.ParentId]?getFullPath(allPools,allPools[pool.ParentId])+" > "+pool.ID:pool.ID}function getServiceLineage(mappedServices,service){if(!mappedServices||!service.ParentServiceId||!mappedServices[service.ParentServiceId])return[service];var lineage=getServiceLineage(mappedServices,mappedServices[service.ParentServiceId]);return lineage.push(service),lineage}function refreshPools($scope,resourcesService,cachePools,extraCallback){void 0===$scope.pools&&($scope.pools={}),console.log("Refreshing pools"),resourcesService.get_pools(cachePools,function(allPools){$scope.pools.mapped=allPools,$scope.pools.data=map_to_array(allPools),$scope.pools.tree=[];var flatroot={children:[]};for(var key in allPools){var p=allPools[key];p.collapsed=!1,p.childrenClass="nav-tree",p.dropped=[],p.itemClass="pool-data",void 0===p.icon&&(p.icon="glyphicon spacer disabled");var parent=allPools[p.ParentId];parent?(void 0===parent.children&&(parent.children=[],parent.icon=POOL_ICON_OPEN),parent.children.push(p),p.fullPath=getFullPath(allPools,p)):(flatroot.children.push(p),$scope.pools.tree.push(p),p.fullPath=p.ID)}$scope.params&&$scope.params.poolID&&($scope.pools.current=allPools[$scope.params.poolID],$scope.editPool=$.extend({},$scope.pools.current)),$scope.pools.flattened=flattenTree(0,flatroot),extraCallback&&extraCallback()})}function toggleRunning(app,status,servicesService){function updateAppText(app,text,notRunningText){var i;if(app.runningText=text,app.notRunningText=notRunningText,app.children)for(i=0;i<app.children.length;i++)updateAppText(app.children[i],text,notRunningText)}function updateApp(app,desiredState){var i,child;if(updateRunning(app),app.children&&app.children.length)for(i=0;i<app.children.length;i++)child=app.children[i],child.DesiredState=desiredState,updateRunning(child),child.children&&child.children.length&&updateApp(child,desiredState)}var newState=-1;switch(status){case"start":newState=1;break;case"stop":newState=0;break;case"restart":newState=-1}return newState===app.DesiredState?void console.log("Same status. Ignoring click"):((0==newState||-1==newState)&&(app.DesiredState=newState,servicesService.stop_service(app.Id,function(){updateApp(app,newState)}),updateAppText(app,"stopping...","ctl_running_blank")),void((1==newState||-1==newState)&&(app.DesiredState=newState,servicesService.start_service(app.Id,function(){updateApp(app,newState)}),updateAppText(app,"ctl_running_blank","starting..."))))}function updateRunning(app){1===app.DesiredState?(app.runningText="ctl_running_started",app.notRunningText="ctl_running_blank",app.runningClass="btn btn-success active",app.notRunningClass="btn btn-default off"):-1===app.DesiredState?(app.runningText="ctl_running_restarting",app.notRunningText="ctl_running_blank",app.runningClass="btn btn-info active",app.notRunningClass="btn btn-default off"):(app.runningText="ctl_running_blank",app.notRunningText="ctl_running_stopped",app.runningClass="btn btn-default off",app.notRunningClass="btn btn-danger active"),"successful"!==app.Deployment&&(app.runningClass+=" disabled",app.notRunningClass+=" disabled")}function refreshHosts($scope,resourcesService,cacheHosts,extraCallback){void 0===$scope.hosts&&($scope.hosts={}),resourcesService.get_hosts(cacheHosts,function(allHosts){if($scope.hosts.mapped=allHosts,$scope.hosts.all=map_to_array(allHosts),void 0===$scope.pools||void 0===$scope.pools.mapped?$scope.$watch("pools.mapped",function(){fix_pool_paths($scope)}):fix_pool_paths($scope),$scope.params&&$scope.params.hostId){var current=allHosts[$scope.params.hostId];current&&($scope.editHost=$.extend({},current),$scope.hosts.current=current)}extraCallback&&extraCallback()})}function refreshRunningForHost($scope,resourcesService,hostId){void 0===$scope.running&&($scope.running={}),resourcesService.get_running_services_for_host(hostId,function(runningServices){$scope.running.data=runningServices;for(var i=0;i<runningServices.length;i++)runningServices[i].DesiredState=1,runningServices[i].Deployment="successful",updateRunning(runningServices[i])})}function refreshRunningForService($scope,resourcesService,serviceId,extracallback){void 0===$scope.running&&($scope.running={}),resourcesService.get_running_services_for_service(serviceId,function(runningServices){$scope.running.data=runningServices,$scope.running.sort="InstanceId";for(var i=0;i<runningServices.length;i++)runningServices[i].DesiredState=1,runningServices[i].Deployment="successful",updateRunning(runningServices[i]);extracallback&&extracallback()})}function fix_pool_paths($scope){if($scope.pools&&$scope.pools.mapped&&$scope.hosts&&$scope.hosts.all)for(var i=0;i<$scope.hosts.all.length;i++){var host=$scope.hosts.all[i];host.fullPath=$scope.pools.mapped[host.PoolID].fullPath}else console.log("Unable to update host pool paths")}function map_to_array(data){var arr=[];for(var key in data)arr[arr.length]=data[key];return arr}function unauthorized($location){console.log("You don't appear to be logged in."),$location.path("/login")}function next_url(data){return data.Links.filter(function(e){return"Next"==e.Name})[0].Url}function set_order(order,table){console.log("Resetting "+table.sort+" to down."),table.sort_icons[table.sort]="glyphicon-chevron-down",table.sort===order?(table.sort="-"+order,table.sort_icons[table.sort]="glyphicon-chevron-down",console.log("Sorting by -"+order)):(table.sort=order,table.sort_icons[table.sort]="glyphicon-chevron-up",console.log("Sorting by "+order))}function get_order_class(order,table){return"glyphicon btn-link sort pull-right "+table.sort_icons[order]+(table.sort===order||table.sort==="-"+order?" active":"")}function buildTable(sort,headers){for(var sort_icons={},i=0;i<headers.length;i++)sort_icons[headers[i].id]=sort===headers[i].id?"glyphicon-chevron-up":"glyphicon-chevron-down";return{sort:sort,headers:headers,sort_icons:sort_icons,set_order:set_order,get_order_class:get_order_class,page:1,pageSize:5}}function indentClass(depth){return"indent"+(depth-1)}function toggleCollapse(child,collapsed){if(child.parentCollapsed=collapsed,child.children&&!child.collapsed)for(var i=0;i<child.children.length;i++)toggleCollapse(child.children[i],collapsed)}function itemClass(item){var cls=item.current?"current":"";return item.parentCollapsed&&(cls+=" hidden"),cls}function removePool(scope,poolID){for(var i=0;i<scope.pools.data.length;++i)scope.pools.data[i].ID===poolID&&scope.pools.data.splice(i,1);for(var i=0;i<scope.pools.flattened.length;++i)scope.pools.flattened[i].ID===poolID&&scope.pools.flattened.splice(i,1);for(var i=0;i<scope.pools.tree.length;++i)scope.pools.tree[i].ID===poolID&&scope.pools.tree.splice(i,1)}function CeleryLogControl($scope,authService){authService.checkLogin($scope),$scope.name="celerylog",$scope.page=1,$scope.pageCount=1,$scope.logs=buildTable("StartTime",[{id:"JobID",name:"celery_tbl_jobid"},{id:"Command",name:"celery_tbl_command"},{id:"StartTime",name:"celery_tbl_starttime"},{id:"EndTime",name:"celery_tbl_endtime"},{id:"ExitCode",name:"celery_tbl_exitcode"}]),$scope.client=new elasticsearch.Client({host:"localhost:9200"}),$scope.commandQuery=function(){return{body:{size:16,from:16*($scope.page-1),sort:[{"@timestamp":{order:"desc"}}],query:{filtered:{query:{match_all:{}},filter:{term:{logtype:"command"}}}}}}},$scope.jobQuery=function(jobid,size){return{body:{size:size,sort:[{"@timestamp":{order:"asc"}}],query:{filtered:{query:{match_all:{}},filter:{term:{"jobid.raw":jobid}}}}}}},$scope.exitQuery=function(jobids){return{size:32,body:{query:{filtered:{query:{match_all:{}},filter:{and:[{terms:{"jobid.raw":jobids}},{term:{"logtype.raw":"exitcode"}}]}}}}}},$scope.buildPage=function(){var jobids=[],jobrecords=[],jobmapping={};$scope.client.search($scope.commandQuery()).then(function(body){$scope.pageCount=Math.max(1,Math.ceil(body.hits.total/16)),$scope.leftDisabled=!1,$scope.rightDisabled=!1,1==$scope.page&&($scope.leftDisabled=!0),$scope.page==$scope.pageCount&&($scope.rightDisabled=!0);for(var i=0;i<body.hits.hits.length;i++){var hit=body.hits.hits[i]._source;jobids.push(hit.jobid);var record={jobid:hit.jobid};record.jobid_short=record.jobid.slice(0,8)+"...",record.command=hit.command,record.starttime=hit["@timestamp"],jobrecords.push(record),jobmapping[hit.jobid]=record}$scope.client.search($scope.exitQuery(jobids)).then(function(body){for(var i=0;i<body.hits.hits.length;i++){var hit=body.hits.hits[i]._source;jobmapping[hit.jobid].exitcode=hit.exitcode,jobmapping[hit.jobid].endtime=hit["@timestamp"]}$scope.logs.data=jobrecords,$scope.$apply(),$("abbr.timeago").timeago()})})},$scope.pageLeft=function(){$scope.page--,$scope.buildPage()},$scope.pageRight=function(){$scope.page++,$scope.buildPage()},$scope.click_jobid=function(jobid){$scope.client.search($scope.jobQuery(jobid,0)).then(function(count){$scope.client.search($scope.jobQuery(jobid,count.hits.total)).then(function(body){$scope.loglines="";for(var i=0;i<body.hits.hits.length;i++){var hit=body.hits.hits[i]._source;"command"==hit.logtype?$scope.loglines+=hit.command+"\n":"stdout"==hit.logtype?$scope.loglines+=hit.stdout:"stderr"==hit.logtype?$scope.loglines+=hit.stderr:"exitcode"==hit.logtype&&($scope.loglines+=hit.exitcode)}$scope.$apply(),$("#jobs-log-modal").modal("show")})})},$scope.buildPage()}function DeployWizard($scope,resourcesService){$scope.name="wizard";var validTemplateSelected=function(){return $scope.selectedTemplates().length>0},validDeploymentId=function(){return void 0!=$scope.install.deploymentId&&""!=$scope.install.deploymentId};$scope.steps=[{content:"/static/partials/wizard-modal-2.html",label:"label_step_select_app",validate:validTemplateSelected},{content:"/static/partials/wizard-modal-3.html",label:"label_step_select_pool"},{content:"/static/partials/wizard-modal-4.html",label:"label_step_deploy",validate:validDeploymentId}],$scope.install={selected:{pool:"default"},templateSelected:function(template){template.depends&&($scope.install.selected[template.depends]=!0)},templateDisabled:function(template){return template.disabledBy?$scope.install.selected[template.disabledBy]:!1},templateSelectedFormDiv:function(){return!nextClicked||validTemplateSelected()?"":"has-error"},deploymentIdFormDiv:function(){return!nextClicked||validDeploymentId()?"":"has-error"}};var nextClicked=!1;resourcesService.get_app_templates(!1,function(templatesMap){var templates=[];for(var key in templatesMap){var template=templatesMap[key];template.Id=key,templates[templates.length]=template}$scope.install.templateData=templates}),$scope.selectedTemplates=function(){for(var templates=[],i=0;i<$scope.install.templateData.length;i++){var template=$scope.install.templateData[i];$scope.install.selected[template.Id]&&(templates[templates.length]=template)}return templates},$scope.getTemplateRequiredResources=function(template){for(var ret={CPUCommitment:0,RAMCommitment:0},i=0;i<template.Services.length;++i)template.Services[i].CPUCommitment&&(ret.CPUCommitment+=template.Services[i].CPUCommitment),template.Services[i].RAMCommitment&&(ret.RAMCommitment+=template.Services[i].RAMCommitment);return ret};var step=0,resetStepPage=function(){step=0,$scope.step_page=$scope.steps[step].content};$scope.addHostStart=function(){$scope.newHost={},$scope.step_page="/static/partials/wizard-modal-addhost.html"},$scope.addHostCancel=function(){$scope.step_page=$scope.steps[step].content},$scope.addHostFinish=function(){$scope.newHost.Name=$scope.newHost.IPAddr,$scope.newHost.ID="fakefakefake",$scope.newHost.selected=!0,$scope.detected_hosts.push($scope.newHost),$scope.step_page=$scope.steps[step].content},$scope.hasPrevious=function(){return step>0&&$scope.step_page===$scope.steps[step].content},$scope.hasNext=function(){return step+1<$scope.steps.length&&$scope.step_page===$scope.steps[step].content},$scope.hasFinish=function(){return step+1===$scope.steps.length},$scope.step_item=function(index){var cls=step>=index?"active":"inactive";return index===step&&(cls+=" current"),cls},$scope.step_label=function(index){return step>index?"done":""},$scope.wizard_next=function(){return nextClicked=!0,$scope.step_page!==$scope.steps[step].content?void($scope.step_page=$scope.steps[step].content):void((!$scope.steps[step].validate||$scope.steps[step].validate())&&(step+=1,$scope.step_page=$scope.steps[step].content,nextClicked=!1))},$scope.wizard_previous=function(){step-=1,$scope.step_page=$scope.steps[step].content},$scope.wizard_finish=function(){if(nextClicked=!0,!$scope.steps[step].validate||$scope.steps[step].validate()){for(var selected=$scope.selectedTemplates(),f=!0,dName="",i=0;i<selected.length;i++)f?f=!1:(dName+=", ",i+1===selected.length&&(dName+="and ")),dName+=selected[i].Name,resourcesService.deploy_app_template({poolID:$scope.install.selected.pool,TemplateId:selected[i].Id,DeploymentId:$scope.install.deploymentId},function(result){refreshServices($scope,resourcesService,!1,function(){if($scope.install.startNow)for(var i=0;i<$scope.services.data.length;++i)result.Detail==$scope.services.data[i].Id&&toggleRunning($scope.services.data[i],"start",resourcesService)})});$scope.services.deployed={name:dName,multi:selected.length>1,"class":"deployed alert alert-success",show:!0,deployment:"ready"},$("#addApp").modal("hide"),resetStepPage(),nextClicked=!1}},$scope.detected_hosts=[{Name:"Hostname A",IPAddr:"192.168.34.1",Id:"A071BF1"},{Name:"Hostname B",IPAddr:"192.168.34.25",Id:"B770DAD"},{Name:"Hostname C",IPAddr:"192.168.33.99",Id:"CCD090B"},{Name:"Hostname D",IPAddr:"192.168.33.129",Id:"DCDD3F0"}],$scope.no_detected_hosts=$scope.detected_hosts.length<1,resetStepPage(),refreshPools($scope,resourcesService,!0)}function DeployedAppsControl($scope,$routeParams,$location,resourcesService,authService){authService.checkLogin($scope),$scope.name="apps",$scope.params=$routeParams,$scope.servicesService=resourcesService,$scope.breadcrumbs=[{label:"breadcrumb_deployed",itemClass:"active"}],$scope.services=buildTable("poolID",[{id:"Name",name:"deployed_tbl_name"},{id:"Deployment",name:"deployed_tbl_deployment"},{id:"Id",name:"deployed_tbl_deployment_id"},{id:"poolID",name:"deployed_tbl_pool"},{id:"VirtualHost",name:"vhost_names"},{id:"DesiredState",name:"deployed_tbl_state"},{id:"DesiredState",name:"running_tbl_actions"}]),$scope.click_app=function(id){$location.path("/services/"+id)},$scope.modalAddApp=function(){$("#addApp").modal("show")},$scope.collect_vhosts=function(app){var vhosts=[],vhosts_definitions=aggregateVhosts(app);for(var i in vhosts_definitions)vhosts.push(vhosts_definitions[i].Name);return vhosts},$scope.vhost_url=function(vhost){return get_vhost_url($location,vhost)},$scope.clickRemoveService=function(app){$scope.appToRemove=app,$("#removeApp").modal("show")},$scope.remove_service=function(){if(!$scope.appToRemove)return void console.log("No selected service to remove");var id=$scope.appToRemove.Id;resourcesService.remove_service(id,function(){delete $scope.appToRemove;var i=0,newServices=[];for(i=0;i<$scope.services.data.length;i++)$scope.services.data[i].Id!=id&&newServices.push($scope.services.data[i]);$scope.services.data=newServices})},$scope.clickRunning=toggleRunning,refreshServices($scope,resourcesService,!1);var setupNewService=function(){$scope.newService={poolID:"default",ParentServiceId:"",DesiredState:1,Launch:"auto",Instances:1,Description:"",ImageId:""}};$scope.click_secondary=function(navlink){navlink.path?$location.path(navlink.path):navlink.modal?$(navlink.modal).modal("show"):console.log("Unexpected navlink: %s",JSON.stringify(navlink))},$scope.dev&&(setupNewService(),$scope.add_service=function(){resourcesService.add_service($scope.newService,function(){refreshServices($scope,resourcesService,!1),setupNewService()})},$scope.secondarynav.push({label:"btn_add_service",modal:"#addService"}))}function DevControl($scope,$cookieStore,authService){authService.checkLogin($scope),$scope.name="developercontrol";var updateDevMode=function(){$scope.devmode.enabled?($scope.devmode.enabledClass="btn btn-success active",$scope.devmode.enabledText="Enabled",$scope.devmode.disabledClass="btn btn-default off",$scope.devmode.disabledText=" "):($scope.devmode.enabledClass="btn btn-default off",$scope.devmode.enabledText=" ",$scope.devmode.disabledClass="btn btn-danger active",$scope.devmode.disabledText="Disabled")};$scope.devmode={enabled:$cookieStore.get("ZDevMode")},$scope.setDevMode=function(enabled){$scope.devmode.enabled=enabled,$cookieStore.put("ZDevMode",enabled),updateDevMode()},updateDevMode()}function EntryControl($scope,authService,resourcesService){authService.checkLogin($scope),$scope.brand_label="brand_zcp",$scope.page_content="entry_content",$scope.showIfEmpty=function(){resourcesService.get_services(!1,function(topServices){topServices.length<=0&&$("#addApp").modal("show")})}}function HostDetailsControl($scope,$routeParams,$location,resourcesService,authService,statsService){authService.checkLogin($scope),$scope.name="hostdetails",$scope.params=$routeParams,$scope.visualization=zenoss.visualization,$scope.visualization.url=$location.protocol()+"://"+$location.host()+":"+$location.port(),$scope.visualization.urlPath="/metrics/static/performance/query/",$scope.visualization.urlPerformance="/metrics/api/performance/query/",$scope.visualization.debug=!1,$scope.breadcrumbs=[{label:"breadcrumb_hosts",url:"#/hosts"}],refreshHosts($scope,resourcesService,!0),$scope.running=buildTable("Name",[{id:"Name",name:"running_tbl_running"},{id:"StartedAt",name:"running_tbl_start"},{id:"View",name:"running_tbl_actions"}]),$scope.ip_addresses=buildTable("Interface",[{id:"Interface",name:"ip_addresses_interface"},{id:"Ip",name:"ip_addresses_ip"}]),$scope.graph=buildTable("Name",[{id:"CPU",name:"graph_tbl_cpu"},{id:"Memory",name:"graph_tbl_mem"}]),$scope.viewConfig=function(running){$scope.editService=$.extend({},running),$scope.editService.config="TODO: Implement",$("#editConfig").modal("show")
},$scope.viewLog=function(running){$scope.editService=$.extend({},running),resourcesService.get_service_state_logs(running.ServiceId,running.Id,function(log){$scope.editService.log=log.Detail,$("#viewLog").modal("show")})},$scope.click_app=function(instance){$location.path("/services/"+instance.ServiceId)},$scope.killRunning=function(running){resourcesService.kill_running(running.HostId,running.Id,function(){refreshRunningForHost($scope,resourcesService,$scope.params.hostId)})},refreshRunningForHost($scope,resourcesService,$scope.params.hostId),refreshHosts($scope,resourcesService,!0,function(){$scope.hosts.current&&$scope.breadcrumbs.push({label:$scope.hosts.current.Name,itemClass:"active"})}),statsService.is_collecting(function(status){$scope.collectingStats=200==status?!0:!1}),$scope.cpuconfig={datapoints:[{aggregator:"avg",color:"#aec7e8",expression:null,fill:!1,format:"%6.2f",id:"system",legend:"CPU (System)",metric:"CpuacctStat.system",name:"CPU (System)",rate:!0,rateOptions:{},type:"line"},{aggregator:"avg",color:"#98df8a",expression:null,fill:!1,format:"%6.2f",id:"user",legend:"CPU (User)",metric:"CpuacctStat.user",name:"CPU (User)",rate:!0,rateOptions:{},type:"line"}],footer:!1,format:"%6.2f",maxy:null,miny:0,range:{end:"0s-ago",start:"1h-ago"},returnset:"EXACT",tags:{},type:"line",downsample:"1m-avg"},$scope.ofdconfig={datapoints:[{aggregator:"avg",color:"#aec7e8",expression:null,fill:!1,format:"%6.2f",id:"ofd",legend:"Serviced Open File Descriptors",metric:"Serviced.OpenFileDescriptors",name:"Serviced Open File Descriptors",rate:!1,rateOptions:{},type:"line"}],footer:!1,format:"%d",maxy:null,miny:0,range:{end:"0s-ago",start:"1h-ago"},returnset:"EXACT",tags:{},type:"line",downsample:"1m-avg"},$scope.memconfig={datapoints:[{aggregator:"avg",color:"#aec7e8",expression:null,expression:null,fill:!1,format:"%d",id:"pgfault",legend:"Page Faults",metric:"MemoryStat.pgfault",name:"Page Faults",rate:!0,rateOptions:{},type:"line"}],footer:!1,format:"%6.2f",maxy:null,miny:0,range:{end:"0s-ago",start:"1h-ago"},returnset:"EXACT",tags:{},type:"line",downsample:"1m-avg"},$scope.rssconfig={datapoints:[{aggregator:"avg",expression:"rpn:1024,/,1024,/",fill:!1,format:"%6.2f",id:"rssmemory",legend:"RSS Memory",metric:"MemoryStat.rss",name:"RSS Memory",rateOptions:{},type:"line",fill:!0}],footer:!1,format:"%6.2f",maxy:null,miny:0,range:{end:"0s-ago",start:"1h-ago"},yAxisLabel:"MB",returnset:"EXACT",height:300,width:300,tags:{},type:"line",downsample:"1m-avg"},$scope.drawn={},$scope.viz=function(id,config){if(!$scope.drawn[id]){if(void 0===window.zenoss)return"Not collecting stats, graphs unavailable";zenoss.visualization.chart.create(id,config),$scope.drawn[id]=!0}}}function HostsControl($scope,$routeParams,$location,$filter,$timeout,resourcesService,authService){authService.checkLogin($scope),$scope.name="hosts",$scope.params=$routeParams,$scope.breadcrumbs=[{label:"breadcrumb_hosts",itemClass:"active"}],$scope.toggleCollapsed=function(toggled){if(toggled.collapsed=!toggled.collapsed,void 0!==toggled.children){toggled.icon=toggled.collapsed?POOL_ICON_CLOSED:POOL_ICON_OPEN;for(var i=0;i<toggled.children.length;i++)toggleCollapse(toggled.children[i],toggled.collapsed)}},$scope.itemClass=itemClass,$scope.indent=indentClass,$scope.newPool={},$scope.newHost={},$scope.add_host=function(){resourcesService.add_host($scope.newHost,function(){refreshHosts($scope,resourcesService,!1,hostCallback)}),$scope.newHost={poolID:$scope.params.poolID}},$scope.addSubpool=function(poolID){$scope.newPool.ParentId=poolID,$("#addPool").modal("show")},$scope.delSubpool=function(poolID){resourcesService.remove_pool(poolID,function(){refreshPools($scope,resourcesService,!1,function(){removePool($scope,poolID)})})},$scope.modalAddHost=function(){$("#addHost").modal("show")},$scope.pools=buildTable("Id",[{id:"Id",name:"Id"},{id:"ParentId",name:"Parent Id"},{id:"Priority",name:"Priority"}]);var clearLastStyle=function(){var lastPool=$scope.pools.mapped[$scope.selectedPool];lastPool&&(lastPool.current=!1)};$scope.clearSelectedPool=function(){clearLastStyle(),$scope.selectedPool=null,$scope.subPools=null,hostCallback()},$scope.clickHost=function(hostId){$location.path("/hosts/"+hostId)},$scope.clickPool=function(poolID){var topPool=$scope.pools.mapped[poolID];if(!topPool||$scope.selectedPool===poolID)return void $scope.clearSelectedPool();clearLastStyle(),topPool.current=!0;var allowed={};addChildren(allowed,topPool),$scope.subPools=allowed,$scope.selectedPool=poolID,hostCallback()},$scope.dropped=[],$scope.filterHosts=function(){$scope.hosts.filtered||($scope.hosts.filtered=[]);var ordered=$filter("orderBy")($scope.hosts.all,$scope.hosts.sort),filtered=$filter("filter")(ordered,$scope.hosts.search),treeFiltered=$filter("treeFilter")(filtered,"poolID",$scope.subPools);$scope.hosts.filteredCount=treeFiltered?treeFiltered.length:0;var page=$scope.hosts.page?$scope.hosts.page:1,pageSize=$scope.hosts.pageSize?$scope.hosts.pageSize:5,itemsToTake=page*pageSize;return $scope.hosts.filteredCountLimit=itemsToTake,treeFiltered&&($scope.hosts.filtered=treeFiltered.splice(0,itemsToTake)),$scope.hosts.filtered},$scope.loadMore=function(){return $scope.hosts.filteredCount&&$scope.hosts.filteredCountLimit&&$scope.hosts.filteredCountLimit<$scope.hosts.filteredCount?($scope.hosts.page+=1,$scope.filterHosts(),!0):!1},$scope.dropIt=function(event){var poolID=$(event.target).attr("data-pool-id"),host=($scope.pools.mapped[poolID],$scope.dropped[0]);poolID!==host.poolID&&($scope.move={host:host,newpool:poolID},$scope.dropped=[],$("#confirmMove").modal("show"))},$scope.confirmMove=function(){console.log("Reassigning %s to %s",$scope.move.host.Name,$scope.move.newpool);var modifiedHost=$.extend({},$scope.move.host);modifiedHost.poolID=$scope.move.newpool,resourcesService.update_host(modifiedHost.ID,modifiedHost,function(){refreshHosts($scope,resourcesService,!1,hostCallback)})},$scope.add_pool=function(){console.log("Adding pool %s as child of pool %s",$scope.newPool.ID,$scope.params.poolID),resourcesService.add_pool($scope.newPool,function(){refreshPools($scope,resourcesService,!1)}),$scope.newPool={}},$scope.remove_pool=function(){console.log("Removing pool %s",$scope.params.poolID),resourcesService.remove_pool($scope.params.poolID,function(){refreshPools($scope,resourcesService,!1)})},$scope.hosts=buildTable("Name",[{id:"Name",name:"Name"},{id:"fullPath",name:"Assigned Resource Pool"}]),$scope.clickMenu=function(index){$("#pool_menu_"+index).addClass("tempvis"),setTimeout(function(){$("#pool_menu_"+index).removeClass("tempvis")},600)};var hostCallback=function(){$scope.hosts.page=1,$scope.hosts.pageSize=10,$scope.filterHosts(),$timeout($scope.hosts.scroll,100)};refreshPools($scope,resourcesService,!1),refreshHosts($scope,resourcesService,!1,hostCallback)}function HostsMapControl($scope,$routeParams,$location,resourcesService,authService){authService.checkLogin($scope),$scope.name="hostsmap",$scope.params=$routeParams,$scope.itemClass=itemClass,$scope.indent=indentClass,$scope.breadcrumbs=[{label:"breadcrumb_hosts",url:"#/hosts"},{label:"breadcrumb_hosts_map",itemClass:"active"}],$scope.addSubpool=function(poolID){$scope.newPool.ParentId=poolID,$("#addPool").modal("show")},$scope.delSubpool=function(poolID){resourcesService.remove_pool(poolID,function(){refreshPools($scope,resourcesService,!1,function(){removePool($scope,poolID)})})},$scope.newPool={},$scope.newHost={};var clearLastStyle=function(){var lastPool=$scope.pools.mapped[$scope.selectedPool];lastPool&&(lastPool.current=!1)};$scope.clearSelectedPool=function(){clearLastStyle(),$scope.selectedPool=null;var root={Id:"All Resource Pools",children:$scope.pools.tree};$scope.hosts.filteredCount=$scope.hosts.all.length,selectNewRoot(root)};var countFromPool=function(e){if(e.isHost)return 1;if(void 0===e.children)return 0;for(var count=0,i=0;i<e.children.length;i++)count+=countFromPool(e.children[i]);return count};$scope.clickPool=function(poolID){var topPool=$scope.pools.mapped[poolID];return topPool&&$scope.selectedPool!==poolID?(clearLastStyle(),topPool.current=!0,$scope.selectedPool=poolID,$scope.hosts.filteredCount=countFromPool(topPool),void selectNewRoot(topPool)):void $scope.clearSelectedPool()};var width=857,height=567,cpuCores=function(h){return h.Cores},memoryCapacity=function(h){return h.Memory},poolBgColor=function(p){return p.isHost?null:color(p.Id)},hostText=function(h){return h.isHost?h.Name:null},color=d3.scale.category20c(),treemap=d3.layout.treemap().size([width,height]).value(memoryCapacity),position=function(){this.style("left",function(d){return d.x+"px"}).style("top",function(d){return d.y+"px"}).style("width",function(d){return Math.max(0,d.dx-1)+"px"}).style("height",function(d){return Math.max(0,d.dy-1)+"px"})};$scope.selectionButtonClass=function(id){var cls="btn btn-link nav-link";return $scope.treemapSelection===id&&(cls+=" active"),cls},$scope.selectByMemory=function(){$scope.treemapSelection="memory",selectNewValue(memoryCapacity)},$scope.selectByCores=function(){$scope.treemapSelection="cpu",selectNewValue(cpuCores)};var selectNewValue=function(valFunc){var node=d3.select("#hostmap").selectAll(".node").data(treemap.value(valFunc).nodes);node.enter().append("div").attr("class","node"),node.transition().duration(1e3).call(position).style("background",poolBgColor).text(hostText),node.exit().remove()},selectNewRoot=function(newroot){console.log("Selected %s",newroot.Id);var node=d3.select("#hostmap").datum(newroot).selectAll(".node").data(treemap.nodes);node.enter().append("div").attr("class","node"),node.transition().duration(1e3).call(position).style("background",poolBgColor).text(hostText),node.exit().remove()},hostsAddedToPools=!1,wait={pools:!1,hosts:!1},addHostsToPools=function(){if(wait.pools&&wait.hosts){if(hostsAddedToPools)return void console.log("Already built");console.log("Preparing tree map"),$scope.hosts.filteredCount=$scope.hosts.all.length,hostsAddedToPools=!0;for(var key in $scope.hosts.mapped){var host=$scope.hosts.mapped[key],pool=$scope.pools.mapped[host.poolID];void 0===pool.children&&(pool.children=[]),pool.children.push(host),host.isHost=!0}var root={Id:"All Resource Pools",children:$scope.pools.tree};selectNewRoot(root)}};$scope.treemapSelection="memory",refreshPools($scope,resourcesService,!1,function(){wait.pools=!0,addHostsToPools()}),refreshHosts($scope,resourcesService,!1,function(){wait.hosts=!0,addHostsToPools()})}function LanguageControl($scope,$cookies,$translate){$scope.name="language",$scope.setUserLanguage=function(){console.log("User clicked %s",$scope.user.language),$cookies.Language=$scope.user.language,updateLanguage($scope,$cookies,$translate),$("#userDetails").modal("hide")},$scope.getLanguageClass=function(language){return $scope.user.language===language?"btn btn-primary active":"btn btn-primary"}}function LoginControl($scope,$http,$location,authService){$scope.brand_label="CONTROL PLANE",$scope.login_button_text="Log In",$scope.login_alert=$("#login_alert"),$scope.login_alert.hide(),$scope.login_alert.rollmsg=function(){$scope.login_alert.fadeIn("slow",function(){setTimeout(function(){$scope.login_alert.fadeOut("slow")},3e3)})},$scope.login=function(){var creds={Username:$scope.username,Password:$scope.password};$http.post("/login",creds).success(function(){authService.login(!0,$scope.username),$location.path("/entry")}).error(function(data){console.log("Login failed"),authService.login(!1),$scope.extra_class="has-error",$scope.login_status="alert-danger",$scope.login_message=data.Detail,$scope.login_alert.rollmsg()})}}function NavbarControl($scope,$http,$cookies,$location,$route,$translate,authService){$scope.name="navbar",$scope.brand={url:"#/entry",label:"brand_cp"},$scope.navlinks=[{url:"#/apps",label:"nav_apps",sublinks:["#/services/","#/servicesmap"],target:"_self"},{url:"#/pools",label:"nav_pools",sublinks:["#/pools/"],target:"_self"},{url:"#/hosts",label:"nav_hosts",sublinks:["#/hosts/","#/hostsmap"],target:"_self"},{url:"/static/logview/#/dashboard/file/logstash.json",label:"nav_logs",sublinks:[],target:"_blank"}];for(var i=0;i<$scope.navlinks.length;i++){var cls="",currUrl="#"+$location.path();if($scope.navlinks[i].url===currUrl)cls="active";else for(var j=0;j<$scope.navlinks[i].sublinks.length;j++)0===currUrl.indexOf($scope.navlinks[i].sublinks[j])&&(cls="active");$scope.navlinks[i].itemClass=cls}$scope.logout=function(){authService.login(!1),$http.delete("/login").success(function(){$location.path("/login")}).error(function(){console.error("Unable to log out. Were you logged in to begin with?")})},$scope.modalUserDetails=function(){$("#userDetails").modal("show")},updateLanguage($scope,$cookies,$translate);var helpMap={"/static/partials/main.html":"main.html","/static/partials/login.html":"login.html","/static/partials/view-subservices.html":"subservices.html","/static/partials/view-apps.html":"apps.html","/static/partials/view-hosts.html":"hosts.html","/static/partials/view-host-map.html":"hostmap.html","/static/partials/view-service-map.html":"servicemap.html","/static/partials/view-host-details.html":"hostdetails.html","/static/partials/view-devmode.html":"devmode.html"};$scope.help={url:function(){return"/static/help/"+$scope.user.language+"/"+helpMap[$route.current.templateUrl]}}}function PoolsControl($scope,$routeParams,$location,$filter,$timeout,resourcesService,authService){authService.checkLogin($scope),$scope.name="pools",$scope.params=$routeParams,$scope.newPool={},$scope.breadcrumbs=[{label:"breadcrumb_pools",itemClass:"active"}],$scope.pools=buildTable("Id",[{id:"Id",name:"pools_tbl_id"},{id:"Priority",name:"pools_tbl_priority"},{id:"CoreLimit",name:"pools_tbl_core_limit"},{id:"MemoryLimit",name:"pools_tbl_memory_limit"},{id:"CreatedAt",name:"pools_tbl_created_at"},{id:"UpdatedAt",name:"pools_tbl_updated_at"},{id:"Actions",name:"pools_tbl_actions"}]),$scope.click_pool=function(id){$location.path("/pools/"+id)},$scope.clickRemovePool=function(poolID){console.log("Click Remove pool w/id: ",poolID),resourcesService.remove_pool(poolID,function(){refreshPools($scope,resourcesService,!1,function(){removePool($scope,poolID)})})},$scope.modalAddPool=function(){$scope.newPool={},$("#addPool").modal("show")},$scope.add_pool=function(){console.log("Adding pool %s as child of pool %s",$scope.newPool.ID,$scope.params.poolID),resourcesService.add_pool($scope.newPool,function(){refreshPools($scope,resourcesService,!1)}),$scope.newPool={}},refreshPools($scope,resourcesService,!0)}function PoolDetailsControl($scope,$routeParams,$location,resourcesService,authService){authService.checkLogin($scope),$scope.name="pooldetails",$scope.params=$routeParams,$scope.breadcrumbs=[{label:"breadcrumb_pools",itemClass:"active"}],$scope.virtual_ip_addresses=buildTable("Address",[{id:"Address",name:"pool_tbl_virtual_ip_address"},{id:"Actions",name:"pool_tbl_virtual_ip_address_action"}]),$scope.clickRemoveVirtualIp=function(pool,ip){console.log("Removing pool's virtual ip address: ",pool,ip),resourcesService.remove_pool_virtual_ip(pool.ID,ip,function(){refreshPools($scope,resourcesService,!1)})},$scope.modalAddVirtualIp=function(pool){$scope.pools.add_virtual_ip={id:pool.ID,ip:""},$("#poolAddVirtualIp").modal("show")},$scope.AddVirtualIp=function(){var poolID=$scope.pools.add_virtual_ip.id,ip=$scope.pools.add_virtual_ip.ip;resourcesService.add_pool_virtual_ip(poolID,ip,function(){$scope.pools.add_virtual_ip.ip=""}),$("#poolAddVirtualIp").modal("hide")},$scope.CancelAddVirtualIp=function(){$scope.pools.add_virtual_ip=null,$("#poolAddVirtualIp").modal("hide")},refreshPools($scope,resourcesService,!0,function(){$scope.pools.current&&$scope.breadcrumbs.push({label:$scope.pools.current.Id,itemClass:"active"})})}function ServicesMapControl($scope,$location,$routeParams,authService,resourcesService){authService.checkLogin($scope),$scope.name="servicesmap",$scope.params=$routeParams,$scope.breadcrumbs=[{label:"breadcrumb_deployed",url:"#/apps"},{label:"breadcrumb_services_map",itemClass:"active"}];var data_received={hosts:!1,running:!1,services:!1},nodeClasses={},runningServices=null,draw=function(){if(!data_received.hosts)return void console.log("Waiting for host data");if(!data_received.running)return void console.log("Waiting for running data");if(!data_received.services)return void console.log("Waiting for services data");var states=[],edges=[];for(var key in $scope.services.mapped){var service=$scope.services.mapped[key];if(states[states.length]={id:service.Id,value:{label:service.Name}},nodeClasses[service.Id]="service notrunning",""!==service.ParentServiceId){{$scope.services.mapped[service.ParentServiceId]}nodeClasses[service.ParentServiceId]="service meta",edges[edges.length]={u:service.ParentServiceId,v:key}}}for(var addedHosts={},i=0;i<runningServices.length;i++){var running=runningServices[i];addedHosts[running.HostId]||(states[states.length]={id:running.HostId,value:{label:$scope.hosts.mapped[running.HostId].Name}},nodeClasses[running.HostId]="host",addedHosts[running.HostId]=!0),nodeClasses[running.ServiceId]="service",edges[edges.length]={u:running.ServiceId,v:running.HostId}}var layout=dagreD3.layout().nodeSep(5).rankDir("LR"),renderer=(new dagreD3.Renderer).layout(layout),oldDrawNode=renderer.drawNode();renderer.drawNode(function(graph,u,svg){oldDrawNode(graph,u,svg),svg.attr("class","node "+nodeClasses[u])}),renderer.run(dagreD3.json.decode(states,edges),d3.select("svg g"));var svg=d3.select("svg");svg.call(d3.behavior.zoom().on("zoom",function(){var ev=d3.event;svg.select("g").attr("transform","translate("+ev.translate+") scale("+ev.scale+")")}))};resourcesService.get_running_services(function(data){data_received.running=!0,runningServices=data,draw()}),refreshHosts($scope,resourcesService,!0,function(){data_received.hosts=!0,draw()}),refreshServices($scope,resourcesService,!0,function(){data_received.services=!0,draw()})}function SubServiceControl($scope,$routeParams,$location,$interval,resourcesService,authService){function updateRunning(){$scope.params.serviceId&&refreshRunningForService($scope,resourcesService,$scope.params.serviceId,function(){wait.running=!0,mashHostsToInstances()})}authService.checkLogin($scope),$scope.name="servicedetails",$scope.params=$routeParams,$scope.servicesService=resourcesService,$scope.breadcrumbs=[{label:"breadcrumb_deployed",url:"#/apps"}],$scope.services=buildTable("Name",[{id:"Name",name:"deployed_tbl_name"},{id:"DesiredState",name:"deployed_tbl_state"},{id:"Startup",name:"label_service_startup"}]),$scope.vhosts=buildTable("vhost_name",[{id:"Name",name:"vhost_name"},{id:"Application",name:"vhost_application"},{id:"ServiceEndpoint",name:"vhost_service_endpoint"},{id:"URL",name:"vhost_url"},{id:"Action",name:"vhost_actions"}]),$scope.vhosts.add={},$scope.vhosts.options=[],$scope.click_app=function(id){$location.path("/services/"+id)},$scope.modalAddVHost=function(){$("#addVHost").modal("show")},$scope.addVHost=function(){if(!$scope.vhosts.add.name||$scope.vhosts.add.name.length<=0)return void console.error("Cannot add vhost -- missing name");if($scope.vhosts.options.length<=0)return void console.error("Cannot add vhost -- no available application and service");var name=$scope.vhosts.add.name,serviceId=$scope.vhosts.add.app_ep.ServiceId,serviceEndpoint=$scope.vhosts.add.app_ep.ServiceEndpoint;resourcesService.add_vhost(serviceId,serviceEndpoint,name,function(){$scope.vhosts.add={},refreshServices($scope,resourcesService,!1)})},$scope.vhost_url=function(vhost){return get_vhost_url($location,vhost)},$scope.indent=indentClass,$scope.clickRunning=toggleRunning,$scope.viewConfig=function(service){$scope.editService=$.extend({},service),$scope.editService.config="TODO: Implement",$("#editConfig").modal("show")},$scope.clickRemoveVirtualHost=function(vhost){resourcesService.delete_vhost(vhost.ApplicationId,vhost.ServiceEndpoint,vhost.Name,function(){refreshServices($scope,resourcesService,!1)})},$scope.editConfig=function(service,config){$scope.editService=$.extend({},service),$scope.editService.config=config,$("#editConfig").modal("show")},$scope.viewLog=function(serviceState){$scope.editService=$.extend({},serviceState),resourcesService.get_service_state_logs(serviceState.ServiceId,serviceState.Id,function(log){$scope.editService.log=log.Detail,$("#viewLog").modal("show")})},$scope.snapshotService=function(service){resourcesService.snapshot_service(service.Id,function(label){console.log("Snapshotted service name:%s label:%s",service.Name,label.Detail)})},$scope.updateService=function(){resourcesService.update_service($scope.services.current.Id,$scope.services.current,function(){console.log("Updated %s",$scope.services.current.Id);var lastCrumb=$scope.breadcrumbs[$scope.breadcrumbs.length-1];lastCrumb.label=$scope.services.current.Name})},$interval(updateRunning,3e3),refreshServices($scope,resourcesService,!0,function(){if($scope.services.current)for(var lineage=getServiceLineage($scope.services.mapped,$scope.services.current),i=0;i<lineage.length;i++){var crumb={label:lineage[i].Name};i==lineage.length-1?crumb.itemClass="active":crumb.url="#/services/"+lineage[i].Id,$scope.breadcrumbs.push(crumb)}});var wait={hosts:!1,running:!1},mashHostsToInstances=function(){if(wait.hosts&&wait.running)for(var i=0;i<$scope.running.data.length;i++){var instance=$scope.running.data[i];instance.hostName=$scope.hosts.mapped[instance.HostId].Name}};refreshHosts($scope,resourcesService,!0,function(){wait.hosts=!0,mashHostsToInstances()}),refreshRunningForService($scope,resourcesService,$scope.params.serviceId,function(){wait.running=!0,mashHostsToInstances()}),$scope.killRunning=function(app){resourcesService.kill_running(app.HostId,app.Id,function(){refreshRunningForService($scope,resourcesService,$scope.params.serviceId,function(){wait.running=!0,mashHostsToInstances()})})},$scope.startTerminal=function(){window.open("http://"+window.location.hostname+":50000")};var setupNewService=function(){$scope.newService={poolID:"default",ParentServiceId:$scope.params.serviceId,DesiredState:1,Launch:"auto",Instances:1,Description:"",ImageId:""}};$scope.dev&&(setupNewService(),$scope.add_service=function(){resourcesService.add_service($scope.newService,function(){refreshServices($scope,resourcesService,!1),setupNewService()})},$scope.showAddService=function(){$("#addService").modal("show")},$scope.deleteService=function(){var parent=$scope.services.current.ParentServiceId;console.log("Parent: %s, Length: %d",parent,parent.length),resourcesService.remove_service($scope.params.serviceId,function(){refreshServices($scope,resourcesService,!1,function(){$location.path(parent&&parent.length>0?"/services/"+parent:"/apps")})})})}angular.module("controlplane",["ngRoute","ngCookies","ngDragDrop","pascalprecht.translate","angularMoment"]).config(["$routeProvider",function($routeProvider){$routeProvider.when("/entry",{templateUrl:"/static/partials/main.html",controller:EntryControl}).when("/login",{templateUrl:"/static/partials/login.html",controller:LoginControl}).when("/services/:serviceId",{templateUrl:"/static/partials/view-subservices.html",controller:SubServiceControl}).when("/apps",{templateUrl:"/static/partials/view-apps.html",controller:DeployedAppsControl}).when("/hosts",{templateUrl:"/static/partials/view-hosts.html",controller:HostsControl}).when("/hostsmap",{templateUrl:"/static/partials/view-host-map.html",controller:HostsMapControl}).when("/servicesmap",{templateUrl:"/static/partials/view-service-map.html",controller:ServicesMapControl}).when("/hosts/:hostId",{templateUrl:"/static/partials/view-host-details.html",controller:HostDetailsControl}).when("/jobs",{templateUrl:"/static/partials/celery-log.html",controller:CeleryLogControl}).when("/pools",{templateUrl:"/static/partials/view-pools.html",controller:PoolsControl}).when("/pools/:poolID",{templateUrl:"/static/partials/view-pool-details.html",controller:PoolDetailsControl}).when("/devmode",{templateUrl:"/static/partials/view-devmode.html",controller:DevControl}).otherwise({redirectTo:"/entry"})}]).config(["$translateProvider",function($translateProvider){$translateProvider.useStaticFilesLoader({prefix:"/static/i18n/",suffix:".json"}),$translateProvider.preferredLanguage("en_US")}]).directive("formAutofillFix",function(){return function(scope,elem,attrs){elem.prop("method","POST"),attrs.ngSubmit&&window.setTimeout(function(){elem.unbind("submit").submit(function(e){e.preventDefault(),elem.find("input, textarea, select").trigger("input").trigger("change").trigger("keydown"),scope.$apply(attrs.ngSubmit)})},0)}}).directive("showIfEmpty",function(){return function(scope){scope.showIfEmpty()}}).directive("popover",function(){return function(scope,elem,attrs){$(elem).popover({title:attrs.popoverTitle,trigger:"hover",html:!0,content:attrs.popover})}}).factory("resourcesService",ResourcesService).factory("authService",AuthService).factory("statsService",StatsService).filter("treeFilter",function(){return function(items,field,validData){return validData?items.filter(function(elem){return null!=validData[elem[field]]}):items}}).filter("page",function(){return function(items,hosts){if(items){var pageSize=hosts.pageSize?hosts.pageSize:5;hosts.pages=Math.max(1,Math.ceil(items.length/pageSize)),(!hosts.page||hosts.page>=hosts.pages)&&(hosts.page=0);var page=hosts.page?hosts.page:0,start=page*pageSize;return items.splice(start,pageSize)}}}).filter("toGB",function(){return function(input){return(input/1073741824).toFixed(2)+" GB"}}).directive("scroll",function($rootScope,$window,$timeout){return{link:function(scope,elem,attr){$window=angular.element($window);var handler=function(){var winEdge,elEdge,dataHidden;winEdge=$window.height()+$window.scrollTop(),elEdge=elem.offset().top+elem.height(),dataHidden=elEdge-winEdge,dataHidden<parseInt(attr.scrollSize,10)&&($rootScope.$$phase?scope.$eval(attr.scroll)&&$timeout(handler,100):scope.$apply(attr.scroll)&&$timeout(handler,100))};if(attr.scrollHandlerObj&&attr.scrollHandlerField){var obj=scope[attr.scrollHandlerObj];obj[attr.scrollHandlerField]=handler}return $window.on("scroll",handler),$window.on("resize",handler),scope.$on("$destroy",function(){return $window.off("scroll",handler),$window.off("resize",handler),!0}),$timeout(function(){return handler()},100)}}});var POOL_ICON_CLOSED="glyphicon glyphicon-play btn-link",POOL_ICON_OPEN="glyphicon glyphicon-play rotate-down btn-link",POOL_CHILDREN_CLOSED="hidden",POOL_CHILDREN_OPEN="nav-tree";