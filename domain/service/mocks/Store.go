// Copyright 2016 The Serviced Authors.
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package mocks

import datastore "github.com/control-center/serviced/datastore"
import mock "github.com/stretchr/testify/mock"
import service "github.com/control-center/serviced/domain/service"
import time "time"

// Store is an autogenerated mock type for the Store type
type Store struct {
	mock.Mock
}

// Delete provides a mock function with given fields: ctx, id
func (_m *Store) Delete(ctx datastore.Context, id string) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(datastore.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindChildService provides a mock function with given fields: ctx, deploymentID, parentID, serviceName
func (_m *Store) FindChildService(ctx datastore.Context, deploymentID string, parentID string, serviceName string) (*service.Service, error) {
	ret := _m.Called(ctx, deploymentID, parentID, serviceName)

	var r0 *service.Service
	if rf, ok := ret.Get(0).(func(datastore.Context, string, string, string) *service.Service); ok {
		r0 = rf(ctx, deploymentID, parentID, serviceName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*service.Service)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(datastore.Context, string, string, string) error); ok {
		r1 = rf(ctx, deploymentID, parentID, serviceName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindTenantByDeploymentID provides a mock function with given fields: ctx, deploymentID, name
func (_m *Store) FindTenantByDeploymentID(ctx datastore.Context, deploymentID string, name string) (*service.Service, error) {
	ret := _m.Called(ctx, deploymentID, name)

	var r0 *service.Service
	if rf, ok := ret.Get(0).(func(datastore.Context, string, string) *service.Service); ok {
		r0 = rf(ctx, deploymentID, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*service.Service)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(datastore.Context, string, string) error); ok {
		r1 = rf(ctx, deploymentID, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: ctx, id
func (_m *Store) Get(ctx datastore.Context, id string) (*service.Service, error) {
	ret := _m.Called(ctx, id)

	var r0 *service.Service
	if rf, ok := ret.Get(0).(func(datastore.Context, string) *service.Service); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*service.Service)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(datastore.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllPublicEndpoints provides a mock function with given fields: ctx
func (_m *Store) GetAllPublicEndpoints(ctx datastore.Context) ([]service.PublicEndpoint, error) {
	ret := _m.Called(ctx)

	var r0 []service.PublicEndpoint
	if rf, ok := ret.Get(0).(func(datastore.Context) []service.PublicEndpoint); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]service.PublicEndpoint)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(datastore.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllIPAssignments returns all IP assignments in the system, including those that may not have address assignments
func (_m *Store) GetAllIPAssignments(ctx datastore.Context) ([]service.BaseIPAssignment, error) {
	ret := _m.Called(ctx)

	var r0 []service.BaseIPAssignment
	if rf, ok := ret.Get(0).(func(datastore.Context) []service.BaseIPAssignment); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]service.BaseIPAssignment)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(datastore.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllServiceDetails provides a mock function with given fields: ctx, since
func (_m *Store) GetAllServiceDetails(ctx datastore.Context, since time.Duration) ([]service.ServiceDetails, error) {
	ret := _m.Called(ctx, since)

	var r0 []service.ServiceDetails
	if rf, ok := ret.Get(0).(func(datastore.Context, time.Duration) []service.ServiceDetails); ok {
		r0 = rf(ctx, since)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]service.ServiceDetails)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(datastore.Context, time.Duration) error); ok {
		r1 = rf(ctx, since)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllServiceHealth provides a mock function with given fields: ctx
func (_m *Store) GetAllServiceHealth(ctx datastore.Context) ([]service.ServiceHealth, error) {
	ret := _m.Called(ctx)

	var r0 []service.ServiceHealth
	if rf, ok := ret.Get(0).(func(datastore.Context) []service.ServiceHealth); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]service.ServiceHealth)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(datastore.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetChildServices provides a mock function with given fields: ctx, parentID
func (_m *Store) GetChildServices(ctx datastore.Context, parentID string) ([]service.Service, error) {
	ret := _m.Called(ctx, parentID)

	var r0 []service.Service
	if rf, ok := ret.Get(0).(func(datastore.Context, string) []service.Service); ok {
		r0 = rf(ctx, parentID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]service.Service)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(datastore.Context, string) error); ok {
		r1 = rf(ctx, parentID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetServiceDetails provides a mock function with given fields: ctx, serviceID
func (_m *Store) GetServiceDetails(ctx datastore.Context, serviceID string) (*service.ServiceDetails, error) {
	ret := _m.Called(ctx, serviceID)

	var r0 *service.ServiceDetails
	if rf, ok := ret.Get(0).(func(datastore.Context, string) *service.ServiceDetails); ok {
		r0 = rf(ctx, serviceID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*service.ServiceDetails)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(datastore.Context, string) error); ok {
		r1 = rf(ctx, serviceID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetServiceDetailsByIDOrName provides a mock function with given fields: ctx, query, prefix
func (_m *Store) GetServiceDetailsByIDOrName(ctx datastore.Context, query string, prefix bool) ([]service.ServiceDetails, error) {
	ret := _m.Called(ctx, query, prefix)

	var r0 []service.ServiceDetails
	if rf, ok := ret.Get(0).(func(datastore.Context, string, bool) []service.ServiceDetails); ok {
		r0 = rf(ctx, query, prefix)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]service.ServiceDetails)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(datastore.Context, string, bool) error); ok {
		r1 = rf(ctx, query, prefix)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetServiceDetailsByParentID provides a mock function with given fields: ctx, parentID, since
func (_m *Store) GetServiceDetailsByParentID(ctx datastore.Context, parentID string, since time.Duration) ([]service.ServiceDetails, error) {
	ret := _m.Called(ctx, parentID, since)

	var r0 []service.ServiceDetails
	if rf, ok := ret.Get(0).(func(datastore.Context, string, time.Duration) []service.ServiceDetails); ok {
		r0 = rf(ctx, parentID, since)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]service.ServiceDetails)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(datastore.Context, string, time.Duration) error); ok {
		r1 = rf(ctx, parentID, since)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetServiceHealth provides a mock function with given fields: ctx, serviceID
func (_m *Store) GetServiceHealth(ctx datastore.Context, serviceID string) (*service.ServiceHealth, error) {
	ret := _m.Called(ctx, serviceID)

	var r0 *service.ServiceHealth
	if rf, ok := ret.Get(0).(func(datastore.Context, string) *service.ServiceHealth); ok {
		r0 = rf(ctx, serviceID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*service.ServiceHealth)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(datastore.Context, string) error); ok {
		r1 = rf(ctx, serviceID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetServices provides a mock function with given fields: ctx
func (_m *Store) GetServices(ctx datastore.Context) ([]service.Service, error) {
	ret := _m.Called(ctx)

	var r0 []service.Service
	if rf, ok := ret.Get(0).(func(datastore.Context) []service.Service); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]service.Service)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(datastore.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetServicesByDeployment provides a mock function with given fields: ctx, deploymentID
func (_m *Store) GetServicesByDeployment(ctx datastore.Context, deploymentID string) ([]service.Service, error) {
	ret := _m.Called(ctx, deploymentID)

	var r0 []service.Service
	if rf, ok := ret.Get(0).(func(datastore.Context, string) []service.Service); ok {
		r0 = rf(ctx, deploymentID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]service.Service)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(datastore.Context, string) error); ok {
		r1 = rf(ctx, deploymentID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetServicesByPool provides a mock function with given fields: ctx, poolID
func (_m *Store) GetServicesByPool(ctx datastore.Context, poolID string) ([]service.Service, error) {
	ret := _m.Called(ctx, poolID)

	var r0 []service.Service
	if rf, ok := ret.Get(0).(func(datastore.Context, string) []service.Service); ok {
		r0 = rf(ctx, poolID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]service.Service)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(datastore.Context, string) error); ok {
		r1 = rf(ctx, poolID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTaggedServices provides a mock function with given fields: ctx, tags
func (_m *Store) GetTaggedServices(ctx datastore.Context, tags ...string) ([]service.Service, error) {
	ret := _m.Called(ctx, tags)

	var r0 []service.Service
	if rf, ok := ret.Get(0).(func(datastore.Context, ...string) []service.Service); ok {
		r0 = rf(ctx, tags...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]service.Service)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(datastore.Context, ...string) error); ok {
		r1 = rf(ctx, tags...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUpdatedServices provides a mock function with given fields: ctx, since
func (_m *Store) GetUpdatedServices(ctx datastore.Context, since time.Duration) ([]service.Service, error) {
	ret := _m.Called(ctx, since)

	var r0 []service.Service
	if rf, ok := ret.Get(0).(func(datastore.Context, time.Duration) []service.Service); ok {
		r0 = rf(ctx, since)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]service.Service)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(datastore.Context, time.Duration) error); ok {
		r1 = rf(ctx, since)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Put provides a mock function with given fields: ctx, svc
func (_m *Store) Put(ctx datastore.Context, svc *service.Service) error {
	ret := _m.Called(ctx, svc)

	var r0 error
	if rf, ok := ret.Get(0).(func(datastore.Context, *service.Service) error); ok {
		r0 = rf(ctx, svc)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateDesiredState provides a mock function with given fields: ctx, serviceID, desiredState
func (_m *Store) UpdateDesiredState(ctx datastore.Context, serviceID string, desiredState int) error {
	ret := _m.Called(ctx, serviceID, desiredState)

	var r0 error
	if rf, ok := ret.Get(0).(func(datastore.Context, string, int) error); ok {
		r0 = rf(ctx, serviceID, desiredState)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

var _ service.Store = (*Store)(nil)
