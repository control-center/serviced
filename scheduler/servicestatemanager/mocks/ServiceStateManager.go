package mocks

import mock "github.com/stretchr/testify/mock"
import service "github.com/control-center/serviced/domain/service"
import servicestatemanager "github.com/control-center/serviced/scheduler/servicestatemanager"

// ServiceStateManager is an autogenerated mock type for the ServiceStateManager type
type ServiceStateManager struct {
	mock.Mock
}

// AddTenant provides a mock function with given fields: tenantID
func (_m *ServiceStateManager) AddTenant(tenantID string) error {
	ret := _m.Called(tenantID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(tenantID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RemoveTenant provides a mock function with given fields: tenantID
func (_m *ServiceStateManager) RemoveTenant(tenantID string) error {
	ret := _m.Called(tenantID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(tenantID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ScheduleServices provides a mock function with given fields: svcs, tenantID, desiredState, emergency
func (_m *ServiceStateManager) ScheduleServices(svcs []*service.Service, tenantID string, desiredState service.DesiredState, emergency bool) error {
	ret := _m.Called(svcs, tenantID, desiredState, emergency)

	var r0 error
	if rf, ok := ret.Get(0).(func([]*service.Service, string, service.DesiredState, bool) error); ok {
		r0 = rf(svcs, tenantID, desiredState, emergency)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Wait provides a mock function with given fields: tenantID
func (_m *ServiceStateManager) Wait(tenantID string) {
	_m.Called(tenantID)
}

// WaitScheduled provides a mock function with given fields: tenantID, serviceIDs
func (_m *ServiceStateManager) WaitScheduled(tenantID string, serviceIDs ...string) {
	_m.Called(tenantID, serviceIDs)
}

var _ servicestatemanager.ServiceStateManager = (*ServiceStateManager)(nil)
