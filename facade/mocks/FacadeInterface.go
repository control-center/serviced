package mocks

import addressassignment "github.com/control-center/serviced/domain/addressassignment"
import dao "github.com/control-center/serviced/dao"
import datastore "github.com/control-center/serviced/datastore"
import domain "github.com/control-center/serviced/domain"

import health "github.com/control-center/serviced/health"
import host "github.com/control-center/serviced/domain/host"
import mock "github.com/stretchr/testify/mock"
import pool "github.com/control-center/serviced/domain/pool"
import service "github.com/control-center/serviced/domain/service"
import servicedefinition "github.com/control-center/serviced/domain/servicedefinition"
import servicetemplate "github.com/control-center/serviced/domain/servicetemplate"
import time "time"
import user "github.com/control-center/serviced/domain/user"
import "github.com/control-center/serviced/utils"

// FacadeInterface is an autogenerated mock type for the FacadeInterface type
type FacadeInterface struct {
	mock.Mock
}

// AddHost provides a mock function with given fields: ctx, entity
func (_m *FacadeInterface) AddHost(ctx datastore.Context, entity *host.Host) ([]byte, error) {
	ret := _m.Called(ctx, entity)

	var r0 []byte
	if rf, ok := ret.Get(0).(func(datastore.Context, *host.Host) []byte); ok {
		r0 = rf(ctx, entity)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(datastore.Context, *host.Host) error); ok {
		r1 = rf(ctx, entity)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AddPublicEndpointPort provides a mock function with given fields: ctx, serviceid, endpointName, portAddr, usetls, protocol, isEnabled, restart
func (_m *FacadeInterface) AddPublicEndpointPort(ctx datastore.Context, serviceid string, endpointName string, portAddr string, usetls bool, protocol string, isEnabled bool, restart bool) (*servicedefinition.Port, error) {
	ret := _m.Called(ctx, serviceid, endpointName, portAddr, usetls, protocol, isEnabled, restart)

	var r0 *servicedefinition.Port
	if rf, ok := ret.Get(0).(func(datastore.Context, string, string, string, bool, string, bool, bool) *servicedefinition.Port); ok {
		r0 = rf(ctx, serviceid, endpointName, portAddr, usetls, protocol, isEnabled, restart)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*servicedefinition.Port)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(datastore.Context, string, string, string, bool, string, bool, bool) error); ok {
		r1 = rf(ctx, serviceid, endpointName, portAddr, usetls, protocol, isEnabled, restart)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AddPublicEndpointVHost provides a mock function with given fields: ctx, serviceid, endpointName, vhost, isEnabled, restart
func (_m *FacadeInterface) AddPublicEndpointVHost(ctx datastore.Context, serviceid string, endpointName string, vhost string, isEnabled bool, restart bool) (*servicedefinition.VHost, error) {
	ret := _m.Called(ctx, serviceid, endpointName, vhost, isEnabled, restart)

	var r0 *servicedefinition.VHost
	if rf, ok := ret.Get(0).(func(datastore.Context, string, string, string, bool, bool) *servicedefinition.VHost); ok {
		r0 = rf(ctx, serviceid, endpointName, vhost, isEnabled, restart)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*servicedefinition.VHost)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(datastore.Context, string, string, string, bool, bool) error); ok {
		r1 = rf(ctx, serviceid, endpointName, vhost, isEnabled, restart)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AddResourcePool provides a mock function with given fields: ctx, entity
func (_m *FacadeInterface) AddResourcePool(ctx datastore.Context, entity *pool.ResourcePool) error {
	ret := _m.Called(ctx, entity)

	var r0 error
	if rf, ok := ret.Get(0).(func(datastore.Context, *pool.ResourcePool) error); ok {
		r0 = rf(ctx, entity)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AddService provides a mock function with given fields: ctx, svc
func (_m *FacadeInterface) AddService(ctx datastore.Context, svc service.Service) error {
	ret := _m.Called(ctx, svc)

	var r0 error
	if rf, ok := ret.Get(0).(func(datastore.Context, service.Service) error); ok {
		r0 = rf(ctx, svc)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AddServiceConfig provides a mock function with given fields: ctx, serviceID, conf
func (_m *FacadeInterface) AddServiceConfig(ctx datastore.Context, serviceID string, conf servicedefinition.ConfigFile) error {
	ret := _m.Called(ctx, serviceID, conf)

	var r0 error
	if rf, ok := ret.Get(0).(func(datastore.Context, string, servicedefinition.ConfigFile) error); ok {
		r0 = rf(ctx, serviceID, conf)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AddServiceTemplate provides a mock function with given fields: ctx, serviceTemplate, reloadLogstashConfig
func (_m *FacadeInterface) AddServiceTemplate(ctx datastore.Context, serviceTemplate servicetemplate.ServiceTemplate, reloadLogstashConfig bool) (string, error) {
	ret := _m.Called(ctx, serviceTemplate, reloadLogstashConfig)

	var r0 string
	if rf, ok := ret.Get(0).(func(datastore.Context, servicetemplate.ServiceTemplate, bool) string); ok {
		r0 = rf(ctx, serviceTemplate, reloadLogstashConfig)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(datastore.Context, servicetemplate.ServiceTemplate, bool) error); ok {
		r1 = rf(ctx, serviceTemplate, reloadLogstashConfig)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AddUser provides a mock function with given fields: ctx, newUser
func (_m *FacadeInterface) AddUser(ctx datastore.Context, newUser user.User) error {
	ret := _m.Called(ctx, newUser)

	var r0 error
	if rf, ok := ret.Get(0).(func(datastore.Context, user.User) error); ok {
		r0 = rf(ctx, newUser)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AssignIPs provides a mock function with given fields: ctx, assignmentRequest
func (_m *FacadeInterface) AssignIPs(ctx datastore.Context, assignmentRequest addressassignment.AssignmentRequest) error {
	ret := _m.Called(ctx, assignmentRequest)

	var r0 error
	if rf, ok := ret.Get(0).(func(datastore.Context, addressassignment.AssignmentRequest) error); ok {
		r0 = rf(ctx, assignmentRequest)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ClearEmergencyStopFlag provides a mock function with given fields: ctx, serviceID
func (_m *FacadeInterface) ClearEmergencyStopFlag(ctx datastore.Context, serviceID string) (int, error) {
	ret := _m.Called(ctx, serviceID)

	var r0 int
	if rf, ok := ret.Get(0).(func(datastore.Context, string) int); ok {
		r0 = rf(ctx, serviceID)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(datastore.Context, string) error); ok {
		r1 = rf(ctx, serviceID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CountDescendantStates provides a mock function with given fields: ctx, serviceID
func (_m *FacadeInterface) CountDescendantStates(ctx datastore.Context, serviceID string) (map[string]map[string]int, error) {
	ret := _m.Called(ctx, serviceID)

	var r0 map[string]map[string]int
	if rf, ok := ret.Get(0).(func(datastore.Context, string) map[string]map[string]int); ok {
		r0 = rf(ctx, serviceID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]map[string]int)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(datastore.Context, string) error); ok {
		r1 = rf(ctx, serviceID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteServiceConfig provides a mock function with given fields: ctx, fileID
func (_m *FacadeInterface) DeleteServiceConfig(ctx datastore.Context, fileID string) error {
	ret := _m.Called(ctx, fileID)

	var r0 error
	if rf, ok := ret.Get(0).(func(datastore.Context, string) error); ok {
		r0 = rf(ctx, fileID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeployTemplate provides a mock function with given fields: ctx, poolID, templateID, deploymentID
func (_m *FacadeInterface) DeployTemplate(ctx datastore.Context, poolID string, templateID string, deploymentID string) ([]string, error) {
	ret := _m.Called(ctx, poolID, templateID, deploymentID)

	var r0 []string
	if rf, ok := ret.Get(0).(func(datastore.Context, string, string, string) []string); ok {
		r0 = rf(ctx, poolID, templateID, deploymentID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(datastore.Context, string, string, string) error); ok {
		r1 = rf(ctx, poolID, templateID, deploymentID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeployTemplateActive provides a mock function with given fields:
func (_m *FacadeInterface) DeployTemplateActive() ([]map[string]string, error) {
	ret := _m.Called()

	var r0 []map[string]string
	if rf, ok := ret.Get(0).(func() []map[string]string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]map[string]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeployTemplateStatus provides a mock function with given fields: deploymentID, lastStatus, timeout
func (_m *FacadeInterface) DeployTemplateStatus(deploymentID string, lastStatus string, timeout time.Duration) (string, error) {
	ret := _m.Called(deploymentID, lastStatus, timeout)

	var r0 string
	if rf, ok := ret.Get(0).(func(string, string, time.Duration) string); ok {
		r0 = rf(deploymentID, lastStatus, timeout)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, time.Duration) error); ok {
		r1 = rf(deploymentID, lastStatus, timeout)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EmergencyStopService provides a mock function with given fields: ctx, request
func (_m *FacadeInterface) EmergencyStopService(ctx datastore.Context, request dao.ScheduleServiceRequest) (int, error) {
	ret := _m.Called(ctx, request)

	var r0 int
	if rf, ok := ret.Get(0).(func(datastore.Context, dao.ScheduleServiceRequest) int); ok {
		r0 = rf(ctx, request)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(datastore.Context, dao.ScheduleServiceRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EnablePublicEndpointPort provides a mock function with given fields: ctx, serviceid, endpointName, portAddr, isEnabled
func (_m *FacadeInterface) EnablePublicEndpointPort(ctx datastore.Context, serviceid string, endpointName string, portAddr string, isEnabled bool) error {
	ret := _m.Called(ctx, serviceid, endpointName, portAddr, isEnabled)

	var r0 error
	if rf, ok := ret.Get(0).(func(datastore.Context, string, string, string, bool) error); ok {
		r0 = rf(ctx, serviceid, endpointName, portAddr, isEnabled)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// EnablePublicEndpointVHost provides a mock function with given fields: ctx, serviceid, endpointName, vhost, isEnabled
func (_m *FacadeInterface) EnablePublicEndpointVHost(ctx datastore.Context, serviceid string, endpointName string, vhost string, isEnabled bool) error {
	ret := _m.Called(ctx, serviceid, endpointName, vhost, isEnabled)

	var r0 error
	if rf, ok := ret.Get(0).(func(datastore.Context, string, string, string, bool) error); ok {
		r0 = rf(ctx, serviceid, endpointName, vhost, isEnabled)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindHostsInPool provides a mock function with given fields: ctx, poolID
func (_m *FacadeInterface) FindHostsInPool(ctx datastore.Context, poolID string) ([]host.Host, error) {
	ret := _m.Called(ctx, poolID)

	var r0 []host.Host
	if rf, ok := ret.Get(0).(func(datastore.Context, string) []host.Host); ok {
		r0 = rf(ctx, poolID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]host.Host)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(datastore.Context, string) error); ok {
		r1 = rf(ctx, poolID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindReadHostsInPool provides a mock function with given fields: ctx, poolID
func (_m *FacadeInterface) FindReadHostsInPool(ctx datastore.Context, poolID string) ([]host.ReadHost, error) {
	ret := _m.Called(ctx, poolID)

	var r0 []host.ReadHost
	if rf, ok := ret.Get(0).(func(datastore.Context, string) []host.ReadHost); ok {
		r0 = rf(ctx, poolID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]host.ReadHost)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(datastore.Context, string) error); ok {
		r1 = rf(ctx, poolID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetActiveHostIDs provides a mock function with given fields: ctx
func (_m *FacadeInterface) GetActiveHostIDs(ctx datastore.Context) ([]string, error) {
	ret := _m.Called(ctx)

	var r0 []string
	if rf, ok := ret.Get(0).(func(datastore.Context) []string); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(datastore.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAggregateServices provides a mock function with given fields: ctx, since, serviceids
func (_m *FacadeInterface) GetAggregateServices(ctx datastore.Context, since time.Time, serviceids []string) ([]service.AggregateService, error) {
	ret := _m.Called(ctx, since, serviceids)

	var r0 []service.AggregateService
	if rf, ok := ret.Get(0).(func(datastore.Context, time.Time, []string) []service.AggregateService); ok {
		r0 = rf(ctx, since, serviceids)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]service.AggregateService)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(datastore.Context, time.Time, []string) error); ok {
		r1 = rf(ctx, since, serviceids)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllPublicEndpoints provides a mock function with given fields: ctx
func (_m *FacadeInterface) GetAllPublicEndpoints(ctx datastore.Context) ([]service.PublicEndpoint, error) {
	ret := _m.Called(ctx)

	var r0 []service.PublicEndpoint
	if rf, ok := ret.Get(0).(func(datastore.Context) []service.PublicEndpoint); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]service.PublicEndpoint)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(datastore.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetEvaluatedService provides a mock function with given fields: ctx, servicedID, instanceID
func (_m *FacadeInterface) GetEvaluatedService(ctx datastore.Context, servicedID string, instanceID int) (*service.Service, error) {
	ret := _m.Called(ctx, servicedID, instanceID)

	var r0 *service.Service
	if rf, ok := ret.Get(0).(func(datastore.Context, string, int) *service.Service); ok {
		r0 = rf(ctx, servicedID, instanceID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*service.Service)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(datastore.Context, string, int) error); ok {
		r1 = rf(ctx, servicedID, instanceID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetHealthChecksForService provides a mock function with given fields: ctx, id
func (_m *FacadeInterface) GetHealthChecksForService(ctx datastore.Context, id string) (map[string]health.HealthCheck, error) {
	ret := _m.Called(ctx, id)

	var r0 map[string]health.HealthCheck
	if rf, ok := ret.Get(0).(func(datastore.Context, string) map[string]health.HealthCheck); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]health.HealthCheck)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(datastore.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetHost provides a mock function with given fields: ctx, hostID
func (_m *FacadeInterface) GetHost(ctx datastore.Context, hostID string) (*host.Host, error) {
	ret := _m.Called(ctx, hostID)

	var r0 *host.Host
	if rf, ok := ret.Get(0).(func(datastore.Context, string) *host.Host); ok {
		r0 = rf(ctx, hostID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*host.Host)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(datastore.Context, string) error); ok {
		r1 = rf(ctx, hostID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetHostInstances provides a mock function with given fields: ctx, since, hostid
func (_m *FacadeInterface) GetHostInstances(ctx datastore.Context, since time.Time, hostid string) ([]service.Instance, error) {
	ret := _m.Called(ctx, since, hostid)

	var r0 []service.Instance
	if rf, ok := ret.Get(0).(func(datastore.Context, time.Time, string) []service.Instance); ok {
		r0 = rf(ctx, since, hostid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]service.Instance)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(datastore.Context, time.Time, string) error); ok {
		r1 = rf(ctx, since, hostid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetHostKey provides a mock function with given fields: ctx, hostID
func (_m *FacadeInterface) GetHostKey(ctx datastore.Context, hostID string) ([]byte, error) {
	ret := _m.Called(ctx, hostID)

	var r0 []byte
	if rf, ok := ret.Get(0).(func(datastore.Context, string) []byte); ok {
		r0 = rf(ctx, hostID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(datastore.Context, string) error); ok {
		r1 = rf(ctx, hostID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetHostStatuses provides a mock function with given fields: ctx, hostIDs, since
func (_m *FacadeInterface) GetHostStatuses(ctx datastore.Context, hostIDs []string, since time.Time) ([]host.HostStatus, error) {
	ret := _m.Called(ctx, hostIDs, since)

	var r0 []host.HostStatus
	if rf, ok := ret.Get(0).(func(datastore.Context, []string, time.Time) []host.HostStatus); ok {
		r0 = rf(ctx, hostIDs, since)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]host.HostStatus)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(datastore.Context, []string, time.Time) error); ok {
		r1 = rf(ctx, hostIDs, since)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetHosts provides a mock function with given fields: ctx
func (_m *FacadeInterface) GetHosts(ctx datastore.Context) ([]host.Host, error) {
	ret := _m.Called(ctx)

	var r0 []host.Host
	if rf, ok := ret.Get(0).(func(datastore.Context) []host.Host); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]host.Host)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(datastore.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPoolIPs provides a mock function with given fields: ctx, poolID
func (_m *FacadeInterface) GetPoolIPs(ctx datastore.Context, poolID string) (*pool.PoolIPs, error) {
	ret := _m.Called(ctx, poolID)

	var r0 *pool.PoolIPs
	if rf, ok := ret.Get(0).(func(datastore.Context, string) *pool.PoolIPs); ok {
		r0 = rf(ctx, poolID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pool.PoolIPs)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(datastore.Context, string) error); ok {
		r1 = rf(ctx, poolID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetReadHosts provides a mock function with given fields: ctx
func (_m *FacadeInterface) GetReadHosts(ctx datastore.Context) ([]host.ReadHost, error) {
	ret := _m.Called(ctx)

	var r0 []host.ReadHost
	if rf, ok := ret.Get(0).(func(datastore.Context) []host.ReadHost); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]host.ReadHost)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(datastore.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetReadPools provides a mock function with given fields: ctx
func (_m *FacadeInterface) GetReadPools(ctx datastore.Context) ([]pool.ReadPool, error) {
	ret := _m.Called(ctx)

	var r0 []pool.ReadPool
	if rf, ok := ret.Get(0).(func(datastore.Context) []pool.ReadPool); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]pool.ReadPool)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(datastore.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetResourcePool provides a mock function with given fields: ctx, poolID
func (_m *FacadeInterface) GetResourcePool(ctx datastore.Context, poolID string) (*pool.ResourcePool, error) {
	ret := _m.Called(ctx, poolID)

	var r0 *pool.ResourcePool
	if rf, ok := ret.Get(0).(func(datastore.Context, string) *pool.ResourcePool); ok {
		r0 = rf(ctx, poolID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pool.ResourcePool)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(datastore.Context, string) error); ok {
		r1 = rf(ctx, poolID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetResourcePools provides a mock function with given fields: ctx
func (_m *FacadeInterface) GetResourcePools(ctx datastore.Context) ([]pool.ResourcePool, error) {
	ret := _m.Called(ctx)

	var r0 []pool.ResourcePool
	if rf, ok := ret.Get(0).(func(datastore.Context) []pool.ResourcePool); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]pool.ResourcePool)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(datastore.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetService provides a mock function with given fields: ctx, id
func (_m *FacadeInterface) GetService(ctx datastore.Context, id string) (*service.Service, error) {
	ret := _m.Called(ctx, id)

	var r0 *service.Service
	if rf, ok := ret.Get(0).(func(datastore.Context, string) *service.Service); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*service.Service)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(datastore.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetServiceAddressAssignmentDetails provides a mock function with given fields: ctx, serviceID, children
func (_m *FacadeInterface) GetServiceAddressAssignmentDetails(ctx datastore.Context, serviceID string, children bool) ([]service.IPAssignment, error) {
	ret := _m.Called(ctx, serviceID, children)

	var r0 []service.IPAssignment
	if rf, ok := ret.Get(0).(func(datastore.Context, string, bool) []service.IPAssignment); ok {
		r0 = rf(ctx, serviceID, children)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]service.IPAssignment)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(datastore.Context, string, bool) error); ok {
		r1 = rf(ctx, serviceID, children)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetServiceConfig provides a mock function with given fields: ctx, fileID
func (_m *FacadeInterface) GetServiceConfig(ctx datastore.Context, fileID string) (*servicedefinition.ConfigFile, error) {
	ret := _m.Called(ctx, fileID)

	var r0 *servicedefinition.ConfigFile
	if rf, ok := ret.Get(0).(func(datastore.Context, string) *servicedefinition.ConfigFile); ok {
		r0 = rf(ctx, fileID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*servicedefinition.ConfigFile)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(datastore.Context, string) error); ok {
		r1 = rf(ctx, fileID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetServiceConfigs provides a mock function with given fields: ctx, serviceID
func (_m *FacadeInterface) GetServiceConfigs(ctx datastore.Context, serviceID string) ([]service.Config, error) {
	ret := _m.Called(ctx, serviceID)

	var r0 []service.Config
	if rf, ok := ret.Get(0).(func(datastore.Context, string) []service.Config); ok {
		r0 = rf(ctx, serviceID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]service.Config)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(datastore.Context, string) error); ok {
		r1 = rf(ctx, serviceID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetServiceDetails provides a mock function with given fields: ctx, serviceID
func (_m *FacadeInterface) GetServiceDetails(ctx datastore.Context, serviceID string) (*service.ServiceDetails, error) {
	ret := _m.Called(ctx, serviceID)

	var r0 *service.ServiceDetails
	if rf, ok := ret.Get(0).(func(datastore.Context, string) *service.ServiceDetails); ok {
		r0 = rf(ctx, serviceID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*service.ServiceDetails)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(datastore.Context, string) error); ok {
		r1 = rf(ctx, serviceID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetServiceDetailsAncestry provides a mock function with given fields: ctx, serviceID
func (_m *FacadeInterface) GetServiceDetailsAncestry(ctx datastore.Context, serviceID string) (*service.ServiceDetails, error) {
	ret := _m.Called(ctx, serviceID)

	var r0 *service.ServiceDetails
	if rf, ok := ret.Get(0).(func(datastore.Context, string) *service.ServiceDetails); ok {
		r0 = rf(ctx, serviceID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*service.ServiceDetails)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(datastore.Context, string) error); ok {
		r1 = rf(ctx, serviceID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetServiceDetailsByParentID provides a mock function with given fields: ctx, serviceID, since
func (_m *FacadeInterface) GetServiceDetailsByParentID(ctx datastore.Context, serviceID string, since time.Duration) ([]service.ServiceDetails, error) {
	ret := _m.Called(ctx, serviceID, since)

	var r0 []service.ServiceDetails
	if rf, ok := ret.Get(0).(func(datastore.Context, string, time.Duration) []service.ServiceDetails); ok {
		r0 = rf(ctx, serviceID, since)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]service.ServiceDetails)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(datastore.Context, string, time.Duration) error); ok {
		r1 = rf(ctx, serviceID, since)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetServiceDetailsByTenantID provides a mock function with given fields: ctx, tenantID
func (_m *FacadeInterface) GetServiceDetailsByTenantID(ctx datastore.Context, tenantID string) ([]service.ServiceDetails, error) {
	ret := _m.Called(ctx, tenantID)

	var r0 []service.ServiceDetails
	if rf, ok := ret.Get(0).(func(datastore.Context, string) []service.ServiceDetails); ok {
		r0 = rf(ctx, tenantID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]service.ServiceDetails)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(datastore.Context, string) error); ok {
		r1 = rf(ctx, tenantID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetServiceExportedEndpoints provides a mock function with given fields: ctx, serviceID, children
func (_m *FacadeInterface) GetServiceExportedEndpoints(ctx datastore.Context, serviceID string, children bool) ([]service.ExportedEndpoint, error) {
	ret := _m.Called(ctx, serviceID, children)

	var r0 []service.ExportedEndpoint
	if rf, ok := ret.Get(0).(func(datastore.Context, string, bool) []service.ExportedEndpoint); ok {
		r0 = rf(ctx, serviceID, children)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]service.ExportedEndpoint)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(datastore.Context, string, bool) error); ok {
		r1 = rf(ctx, serviceID, children)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetServiceInstances provides a mock function with given fields: ctx, since, serviceid
func (_m *FacadeInterface) GetServiceInstances(ctx datastore.Context, since time.Time, serviceid string) ([]service.Instance, error) {
	ret := _m.Called(ctx, since, serviceid)

	var r0 []service.Instance
	if rf, ok := ret.Get(0).(func(datastore.Context, time.Time, string) []service.Instance); ok {
		r0 = rf(ctx, since, serviceid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]service.Instance)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(datastore.Context, time.Time, string) error); ok {
		r1 = rf(ctx, since, serviceid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetServiceMonitoringProfile provides a mock function with given fields: ctx, serviceID
func (_m *FacadeInterface) GetServiceMonitoringProfile(ctx datastore.Context, serviceID string) (*domain.MonitorProfile, error) {
	ret := _m.Called(ctx, serviceID)

	var r0 *domain.MonitorProfile
	if rf, ok := ret.Get(0).(func(datastore.Context, string) *domain.MonitorProfile); ok {
		r0 = rf(ctx, serviceID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.MonitorProfile)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(datastore.Context, string) error); ok {
		r1 = rf(ctx, serviceID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetServicePublicEndpoints provides a mock function with given fields: ctx, serviceID, children
func (_m *FacadeInterface) GetServicePublicEndpoints(ctx datastore.Context, serviceID string, children bool) ([]service.PublicEndpoint, error) {
	ret := _m.Called(ctx, serviceID, children)

	var r0 []service.PublicEndpoint
	if rf, ok := ret.Get(0).(func(datastore.Context, string, bool) []service.PublicEndpoint); ok {
		r0 = rf(ctx, serviceID, children)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]service.PublicEndpoint)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(datastore.Context, string, bool) error); ok {
		r1 = rf(ctx, serviceID, children)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetServiceTemplates provides a mock function with given fields: ctx
func (_m *FacadeInterface) GetServiceTemplates(ctx datastore.Context) (map[string]servicetemplate.ServiceTemplate, error) {
	ret := _m.Called(ctx)

	var r0 map[string]servicetemplate.ServiceTemplate
	if rf, ok := ret.Get(0).(func(datastore.Context) map[string]servicetemplate.ServiceTemplate); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]servicetemplate.ServiceTemplate)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(datastore.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetServices provides a mock function with given fields: ctx, request
func (_m *FacadeInterface) GetServices(ctx datastore.Context, request dao.EntityRequest) ([]service.Service, error) {
	ret := _m.Called(ctx, request)

	var r0 []service.Service
	if rf, ok := ret.Get(0).(func(datastore.Context, dao.EntityRequest) []service.Service); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]service.Service)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(datastore.Context, dao.EntityRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetServicesHealth provides a mock function with given fields: ctx
func (_m *FacadeInterface) GetServicesHealth(ctx datastore.Context) (map[string]map[int]map[string]health.HealthStatus, error) {
	ret := _m.Called(ctx)

	var r0 map[string]map[int]map[string]health.HealthStatus
	if rf, ok := ret.Get(0).(func(datastore.Context) map[string]map[int]map[string]health.HealthStatus); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]map[int]map[string]health.HealthStatus)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(datastore.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSystemUser provides a mock function with given fields: ctx
func (_m *FacadeInterface) GetSystemUser(ctx datastore.Context) (user.User, error) {
	ret := _m.Called(ctx)

	var r0 user.User
	if rf, ok := ret.Get(0).(func(datastore.Context) user.User); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(user.User)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(datastore.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTaggedServices provides a mock function with given fields: ctx, request
func (_m *FacadeInterface) GetTaggedServices(ctx datastore.Context, request dao.EntityRequest) ([]service.Service, error) {
	ret := _m.Called(ctx, request)

	var r0 []service.Service
	if rf, ok := ret.Get(0).(func(datastore.Context, dao.EntityRequest) []service.Service); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]service.Service)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(datastore.Context, dao.EntityRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTenantID provides a mock function with given fields: ctx, serviceID
func (_m *FacadeInterface) GetTenantID(ctx datastore.Context, serviceID string) (string, error) {
	ret := _m.Called(ctx, serviceID)

	var r0 string
	if rf, ok := ret.Get(0).(func(datastore.Context, string) string); ok {
		r0 = rf(ctx, serviceID)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(datastore.Context, string) error); ok {
		r1 = rf(ctx, serviceID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUser provides a mock function with given fields: ctx, userName
func (_m *FacadeInterface) GetUser(ctx datastore.Context, userName string) (user.User, error) {
	ret := _m.Called(ctx, userName)

	var r0 user.User
	if rf, ok := ret.Get(0).(func(datastore.Context, string) user.User); ok {
		r0 = rf(ctx, userName)
	} else {
		r0 = ret.Get(0).(user.User)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(datastore.Context, string) error); ok {
		r1 = rf(ctx, userName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HasIP provides a mock function with given fields: ctx, poolID, ipAddr
func (_m *FacadeInterface) HasIP(ctx datastore.Context, poolID string, ipAddr string) (bool, error) {
	ret := _m.Called(ctx, poolID, ipAddr)

	var r0 bool
	if rf, ok := ret.Get(0).(func(datastore.Context, string, string) bool); ok {
		r0 = rf(ctx, poolID, ipAddr)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(datastore.Context, string, string) error); ok {
		r1 = rf(ctx, poolID, ipAddr)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HostIsAuthenticated provides a mock function with given fields: ctx, hostid
func (_m *FacadeInterface) HostIsAuthenticated(ctx datastore.Context, hostid string) (bool, error) {
	ret := _m.Called(ctx, hostid)

	var r0 bool
	if rf, ok := ret.Get(0).(func(datastore.Context, string) bool); ok {
		r0 = rf(ctx, hostid)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(datastore.Context, string) error); ok {
		r1 = rf(ctx, hostid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTenants provides a mock function with given fields: _a0
func (_m *FacadeInterface) ListTenants(_a0 datastore.Context) ([]string, error) {
	ret := _m.Called(_a0)

	var r0 []string
	if rf, ok := ret.Get(0).(func(datastore.Context) []string); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(datastore.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MigrateServices provides a mock function with given fields: ctx, request
func (_m *FacadeInterface) MigrateServices(ctx datastore.Context, request dao.ServiceMigrationRequest) error {
	ret := _m.Called(ctx, request)

	var r0 error
	if rf, ok := ret.Get(0).(func(datastore.Context, dao.ServiceMigrationRequest) error); ok {
		r0 = rf(ctx, request)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PredictStorageAvailability provides a mock function with given fields: ctx, lookahead
func (_m *FacadeInterface) PredictStorageAvailability(ctx datastore.Context, lookahead time.Duration) (map[string]float64, error) {
	ret := _m.Called(ctx, lookahead)

	var r0 map[string]float64
	if rf, ok := ret.Get(0).(func(datastore.Context, time.Duration) map[string]float64); ok {
		r0 = rf(ctx, lookahead)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]float64)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(datastore.Context, time.Duration) error); ok {
		r1 = rf(ctx, lookahead)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RegisterHostKeys provides a mock function with given fields: ctx, entity, keys, prompt
func (_m *FacadeInterface) RegisterHostKeys(ctx datastore.Context, entity *host.Host, nat utils.URL, keys []byte, prompt bool) error {
	ret := _m.Called(ctx, entity, nat, keys, prompt)

	var r0 error
	if rf, ok := ret.Get(0).(func(datastore.Context, *host.Host, utils.URL, []byte, bool) error); ok {
		r0 = rf(ctx, entity, nat, keys, prompt)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ReloadLogstashConfig provides a mock function with given fields: ctx
func (_m *FacadeInterface) ReloadLogstashConfig(ctx datastore.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(datastore.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RemoveHost provides a mock function with given fields: ctx, hostID
func (_m *FacadeInterface) RemoveHost(ctx datastore.Context, hostID string) error {
	ret := _m.Called(ctx, hostID)

	var r0 error
	if rf, ok := ret.Get(0).(func(datastore.Context, string) error); ok {
		r0 = rf(ctx, hostID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RemoveHostExpiration provides a mock function with given fields: ctx, hostID
func (_m *FacadeInterface) RemoveHostExpiration(ctx datastore.Context, hostID string) {
	_m.Called(ctx, hostID)
}

// RemovePublicEndpointPort provides a mock function with given fields: ctx, serviceid, endpointName, portAddr
func (_m *FacadeInterface) RemovePublicEndpointPort(ctx datastore.Context, serviceid string, endpointName string, portAddr string) error {
	ret := _m.Called(ctx, serviceid, endpointName, portAddr)

	var r0 error
	if rf, ok := ret.Get(0).(func(datastore.Context, string, string, string) error); ok {
		r0 = rf(ctx, serviceid, endpointName, portAddr)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RemovePublicEndpointVHost provides a mock function with given fields: ctx, serviceid, endpointName, vhost
func (_m *FacadeInterface) RemovePublicEndpointVHost(ctx datastore.Context, serviceid string, endpointName string, vhost string) error {
	ret := _m.Called(ctx, serviceid, endpointName, vhost)

	var r0 error
	if rf, ok := ret.Get(0).(func(datastore.Context, string, string, string) error); ok {
		r0 = rf(ctx, serviceid, endpointName, vhost)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RemoveResourcePool provides a mock function with given fields: ctx, id
func (_m *FacadeInterface) RemoveResourcePool(ctx datastore.Context, id string) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(datastore.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RemoveService provides a mock function with given fields: ctx, id
func (_m *FacadeInterface) RemoveService(ctx datastore.Context, id string) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(datastore.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RemoveServiceTemplate provides a mock function with given fields: ctx, templateID
func (_m *FacadeInterface) RemoveServiceTemplate(ctx datastore.Context, templateID string) error {
	ret := _m.Called(ctx, templateID)

	var r0 error
	if rf, ok := ret.Get(0).(func(datastore.Context, string) error); ok {
		r0 = rf(ctx, templateID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RemoveUser provides a mock function with given fields: ctx, userName
func (_m *FacadeInterface) RemoveUser(ctx datastore.Context, userName string) error {
	ret := _m.Called(ctx, userName)

	var r0 error
	if rf, ok := ret.Get(0).(func(datastore.Context, string) error); ok {
		r0 = rf(ctx, userName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ReportHealthStatus provides a mock function with given fields: key, value, expires
func (_m *FacadeInterface) ReportHealthStatus(key health.HealthStatusKey, value health.HealthStatus, expires time.Duration) {
	_m.Called(key, value, expires)
}

// ReportInstanceDead provides a mock function with given fields: serviceID, instanceID
func (_m *FacadeInterface) ReportInstanceDead(serviceID string, instanceID int) {
	_m.Called(serviceID, instanceID)
}

// ResetHostKey provides a mock function with given fields: ctx, hostID
func (_m *FacadeInterface) ResetHostKey(ctx datastore.Context, hostID string) ([]byte, error) {
	ret := _m.Called(ctx, hostID)

	var r0 []byte
	if rf, ok := ret.Get(0).(func(datastore.Context, string) []byte); ok {
		r0 = rf(ctx, hostID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(datastore.Context, string) error); ok {
		r1 = rf(ctx, hostID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ScheduleService provides a mock function with given fields: ctx, serviceID, autoLaunch, synchronous, desiredState
func (_m *FacadeInterface) ScheduleServices(ctx datastore.Context, serviceIDs []string, autoLaunch bool, synchronous bool, desiredState service.DesiredState, emergency bool) (int, error) {
	ret := _m.Called(ctx, serviceIDs, autoLaunch, synchronous, desiredState, emergency)

	var r0 int
	if rf, ok := ret.Get(0).(func(datastore.Context, []string, bool, bool, service.DesiredState, bool) int); ok {
		r0 = rf(ctx, serviceIDs, autoLaunch, synchronous, desiredState, emergency)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(datastore.Context, []string, bool, bool, service.DesiredState, bool) error); ok {
		r1 = rf(ctx, serviceIDs, autoLaunch, synchronous, desiredState, emergency)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetHostExpiration provides a mock function with given fields: ctx, hostID, expiration
func (_m *FacadeInterface) SetHostExpiration(ctx datastore.Context, hostID string, expiration int64) {
	_m.Called(ctx, hostID, expiration)
}

//StartService provides a mock function with given fields: ctx, ScheduleServiceRequest
func (_m *FacadeInterface) StartService(ctx datastore.Context,  request dao.ScheduleServiceRequest) (int, error) {

	ret := _m.Called(ctx, request)

	var r0 int
	if rf, ok := ret.Get(0).(func(datastore.Context, dao.ScheduleServiceRequest) int); ok {
		r0 = rf(ctx, request)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(0).(func(datastore.Context, dao.ScheduleServiceRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(0)
	}

	return r0, r1
}

//StopService provides a mock function with given fields: ctx, ScheduleServiceRequest
func (_m *FacadeInterface) StopService(ctx datastore.Context,  request dao.ScheduleServiceRequest) (int, error) {

	ret := _m.Called(ctx, request)

	var r0 int
	if rf, ok := ret.Get(0).(func(datastore.Context, dao.ScheduleServiceRequest) int); ok {
		r0 = rf(ctx, request)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(0).(func(datastore.Context, dao.ScheduleServiceRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(0)
	}

	return r0, r1
}
//RestartService provides a mock function with given fields: ctx, ScheduleServiceRequest
func (_m *FacadeInterface) RestartService(ctx datastore.Context,  request dao.ScheduleServiceRequest) (int, error) {

	ret := _m.Called(ctx, request)

	var r0 int
	if rf, ok := ret.Get(0).(func(datastore.Context, dao.ScheduleServiceRequest) int); ok {
		r0 = rf(ctx, request)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(0).(func(datastore.Context, dao.ScheduleServiceRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(0)
	}

	return r0, r1
}


// SyncServiceRegistry provides a mock function with given fields: ctx, svc
func (_m *FacadeInterface) SyncServiceRegistry(ctx datastore.Context, svc *service.Service) error {
	ret := _m.Called(ctx, svc)

	var r0 error
	if rf, ok := ret.Get(0).(func(datastore.Context, *service.Service) error); ok {
		r0 = rf(ctx, svc)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateHost provides a mock function with given fields: ctx, entity
func (_m *FacadeInterface) UpdateHost(ctx datastore.Context, entity *host.Host) error {
	ret := _m.Called(ctx, entity)

	var r0 error
	if rf, ok := ret.Get(0).(func(datastore.Context, *host.Host) error); ok {
		r0 = rf(ctx, entity)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateResourcePool provides a mock function with given fields: ctx, entity
func (_m *FacadeInterface) UpdateResourcePool(ctx datastore.Context, entity *pool.ResourcePool) error {
	ret := _m.Called(ctx, entity)

	var r0 error
	if rf, ok := ret.Get(0).(func(datastore.Context, *pool.ResourcePool) error); ok {
		r0 = rf(ctx, entity)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateService provides a mock function with given fields: ctx, svc
func (_m *FacadeInterface) UpdateService(ctx datastore.Context, svc service.Service) error {
	ret := _m.Called(ctx, svc)

	var r0 error
	if rf, ok := ret.Get(0).(func(datastore.Context, service.Service) error); ok {
		r0 = rf(ctx, svc)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateServiceCache provides a mock function with given fields: ctx
func (_m *FacadeInterface) UpdateServiceCache(ctx datastore.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(datastore.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateServiceConfig provides a mock function with given fields: ctx, fileID, conf
func (_m *FacadeInterface) UpdateServiceConfig(ctx datastore.Context, fileID string, conf servicedefinition.ConfigFile) error {
	ret := _m.Called(ctx, fileID, conf)

	var r0 error
	if rf, ok := ret.Get(0).(func(datastore.Context, string, servicedefinition.ConfigFile) error); ok {
		r0 = rf(ctx, fileID, conf)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateServiceTemplate provides a mock function with given fields: ctx, template, reloadLogstashConfig
func (_m *FacadeInterface) UpdateServiceTemplate(ctx datastore.Context, template servicetemplate.ServiceTemplate, reloadLogstashConfig bool) error {
	ret := _m.Called(ctx, template, reloadLogstashConfig)

	var r0 error
	if rf, ok := ret.Get(0).(func(datastore.Context, servicetemplate.ServiceTemplate, bool) error); ok {
		r0 = rf(ctx, template, reloadLogstashConfig)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateUser provides a mock function with given fields: ctx, u
func (_m *FacadeInterface) UpdateUser(ctx datastore.Context, u user.User) error {
	ret := _m.Called(ctx, u)

	var r0 error
	if rf, ok := ret.Get(0).(func(datastore.Context, user.User) error); ok {
		r0 = rf(ctx, u)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ValidateCredentials provides a mock function with given fields: ctx, u
func (_m *FacadeInterface) ValidateCredentials(ctx datastore.Context, u user.User) (bool, error) {
	ret := _m.Called(ctx, u)

	var r0 bool
	if rf, ok := ret.Get(0).(func(datastore.Context, user.User) bool); ok {
		r0 = rf(ctx, u)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(datastore.Context, user.User) error); ok {
		r1 = rf(ctx, u)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WaitService provides a mock function with given fields: ctx, dstate, timeout, recursive, serviceIDs
func (_m *FacadeInterface) WaitService(ctx datastore.Context, dstate service.DesiredState, timeout time.Duration, recursive bool, serviceIDs ...string) error {
	ret := _m.Called(ctx, dstate, timeout, recursive, serviceIDs)

	var r0 error
	if rf, ok := ret.Get(0).(func(datastore.Context, service.DesiredState, time.Duration, bool, ...string) error); ok {
		r0 = rf(ctx, dstate, timeout, recursive, serviceIDs...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

func (_m *FacadeInterface) QueryServiceDetails(ctx datastore.Context, query service.Query) ([]service.ServiceDetails, error) {
	ret := _m.Called(ctx, query)

	var r0 []service.ServiceDetails
	if rf, ok := ret.Get(0).(func(datastore.Context, service.Query) []service.ServiceDetails); ok {
		r0 = rf(ctx, query)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]service.ServiceDetails)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(datastore.Context, service.Query) error); ok {
		r1 = rf(ctx, query)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

func (_m *FacadeInterface) GetServiceNamePath(ctx datastore.Context, serviceID string) (string, string, error) {
	ret := _m.Called(ctx, serviceID)

	var r0 string
	if rf, ok := ret.Get(0).(func(datastore.Context, string) string); ok {
		r0 = rf(ctx, serviceID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(string)
		}
	}

	var r1 string
        if rf, ok := ret.Get(0).(func(datastore.Context, string) string); ok {
                r1 = rf(ctx, serviceID)
        } else {
                if ret.Get(0) != nil {
                        r1 = ret.Get(0).(string)
                }
        }

	var r2 error
	if rf, ok := ret.Get(1).(func(datastore.Context, string) error); ok {
		r2 = rf(ctx, serviceID)
	} else {
		r2 = ret.Error(1)
	}

	return r0, r1, r2
}
