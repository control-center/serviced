diff --git a/audit/logger.go b/audit/logger.go
index f7033a8..b3b3b83 100644
--- a/audit/logger.go
+++ b/audit/logger.go
@@ -14,9 +14,10 @@
 package audit

 import (
-	"github.com/Sirupsen/logrus"
+	"strconv"
 	"github.com/control-center/serviced/datastore"
 	"github.com/control-center/serviced/logging"
+	"github.com/Sirupsen/logrus"
 	"github.com/zenoss/logri"
 )

@@ -41,9 +42,12 @@ type Logger interface {
 	// Set the type of entity being modified.
 	Entity(entity datastore.Entity) Logger

-	// Add additional fields to the entry.
+	// Add an additional field to the entry.
 	WithField(name string, value string) Logger

+	// Add additional fields to the entry.
+	WithFields(fields logrus.Fields) Logger
+
 	// Log that the action succeeded.
 	Succeeded()

@@ -61,45 +65,67 @@ type Logger interface {
 // to "system" unless otherwise specified in the context.  This wraps a logri Logger,
 // and will write to the location specified in the logger config.
 func NewLogger() Logger {
-	entry := logri.GetLogger("audit").WithField("user", "system")
-
-	// Clear hooks on the logri logger to remove extra fields that we don't need for
-	// the audit log (the "logger" and "location" fields).
-	entry.Logger.Hooks = make(map[logrus.Level][]logrus.Hook)
-
-	return &logger{entry: entry}
+	l := logri.GetLogger("audit")
+	return &logger{loggeri: l}
 }

 type logger struct {
 	entry   *logrus.Entry
 	message string
+	loggeri *logri.Logger
 }

 func (l *logger) Action(action string) Logger {
-	return l.newLoggerWith("action", action)
+	return l.addField("action", action)
 }

 func (l *logger) Message(ctx datastore.Context, message string) Logger {
-	return &logger{entry: l.entry.WithField("user", ctx.User()), message: message}
+    l.addField("user", ctx.User())
+    l.message = message
+    return l
 }

 func (l *logger) Type(theType string) Logger {
-	return l.newLoggerWith("type", theType)
+	return l.addField("type", theType)
 }

 func (l *logger) ID(id string) Logger {
-	return l.newLoggerWith("id", id)
+	return l.addField("id", id)
 }

 func (l *logger) Entity(entity datastore.Entity) Logger {
-	return &logger{entry: l.entry.WithFields(logrus.Fields{
+	return l.addFields(logrus.Fields{
 		"id":   entity.GetID(),
-		"type": entity.GetType()}),
-		message: l.message}
+		"type": entity.GetType(),
+		})
 }

 func (l *logger) WithField(name string, value string) Logger {
-	return l.newLoggerWith(name, value)
+    return l.addField(name, value)
+}
+
+func (l *logger) addField(name string, value string) Logger {
+    if l.entry != nil {
+        l.entry = l.entry.WithField(name, value)
+    } else {
+        l.entry = l.loggeri.WithField(name, value)
+        l.entry.Logger.Hooks = make(map[logrus.Level][]logrus.Hook)
+    }
+    return l
+}
+
+func (l *logger) WithFields(fields logrus.Fields) Logger {
+    return l.addFields(fields)
+}
+
+func (l *logger) addFields(fields logrus.Fields)  Logger {
+    if l.entry != nil {
+        l.entry = l.entry.WithFields(fields)
+    } else {
+        l.entry = l.loggeri.WithFields(fields)
+        l.entry.Logger.Hooks = make(map[logrus.Level][]logrus.Hook)
+    }
+    return l
 }

 func (l *logger) Succeeded() {
@@ -120,7 +146,8 @@ func (l *logger) Error(err error) error {
 }

 func (l *logger) log(success bool) {
-	entry := l.entry.WithField("success", success)
+    l.addField("success", strconv.FormatBool(success))
+    entry := l.entry
 	if len(l.message) == 0 {
 		pkgLogger := plog.WithFields(entry.Data)
 		pkgLogger.Error("Attempting to audit log empty message")
@@ -132,9 +159,3 @@ func (l *logger) log(success bool) {
 	}
 }

-func (l *logger) newLoggerWith(name string, value string) Logger {
-	return &logger{
-		entry:   l.entry.WithField(name, value),
-		message: l.message,
-	}
-}
diff --git a/audit/mocks/logger.go b/audit/mocks/logger.go
index 12a3f93..7615d93 100644
--- a/audit/mocks/logger.go
+++ b/audit/mocks/logger.go
@@ -2,6 +2,7 @@ package mocks

 import "github.com/control-center/serviced/audit"
 import "github.com/control-center/serviced/datastore"
+import "github.com/Sirupsen/logrus"
 import "github.com/stretchr/testify/mock"

 type Logger struct {
@@ -92,6 +93,18 @@ func (_m *Logger) WithField(name string, value string) audit.Logger {

 	return r0
 }
+func (_m *Logger) WithFields(fields logrus.Fields) audit.Logger {
+	ret := _m.Called(fields)
+
+	var r0 audit.Logger
+	if rf, ok := ret.Get(0).(func() audit.Logger); ok {
+		r0 = rf()
+	} else {
+		r0 = ret.Get(0).(audit.Logger)
+	}
+
+	return r0
+}
 func (_m *Logger) Succeeded() {
 	_m.Called()
 }
